
ADC_UART_MOTOR_16MHZ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000cd8  00000d6c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000012  0080013c  0080013c  00000da8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002a5d  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001050  00000000  00000000  00003b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169a  00000000  00000000  00004b6d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004a4  00000000  00000000  00006208  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a09  00000000  00000000  000066ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000104a  00000000  00000000  000070b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  000080ff  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ed       	ldi	r30, 0xD8	; 216
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ae 34       	cpi	r26, 0x4E	; 78
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <main>
  9e:	0c 94 6a 06 	jmp	0xcd4	; 0xcd4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:


void ADC_Init(){
	

	SET_BIT(ADMUX , 6); // Connecting AREFF to AVCC 5V
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
		
	#endif
	*/
	
	// Setting Prescaler to 128
	SET_BIT(ADCSRA , 0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	SET_BIT(ADCSRA , 1);
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	SET_BIT(ADCSRA , 2);
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24

	/////////////////////////////////////////////////////////////////////////	
	
	SET_BIT(ADCSRA , 7);  //-->Enable ADC
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	
	SET_BIT(ADCSRA , 6);  //-->Pre-Conversion
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <Read_ADC>:
}
uint16 Read_ADC(uint8 channel)
{

	//Select ADC Channel with SAFTEY MASK
	ADMUX &= 0xF0;
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	90 83       	st	Z, r25
	
	//Channel Selection
	ADMUX |= channel;
  de:	90 81       	ld	r25, Z
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
	
	SET_BIT(ADCSRA , 6);  //-->Start_Conversion
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	
	while(GET_BIT(ADCSRA , 6));
  ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f2:	86 fd       	sbrc	r24, 6
  f4:	fc cf       	rjmp	.-8      	; 0xee <Read_ADC+0x1a>
	//while(ADCSRA & (1<<ADSC));
	return ADC;
  f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	
	
	
	
}
  fe:	08 95       	ret

00000100 <DCMotor_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	66 e0       	ldi	r22, 0x06	; 6
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	67 e0       	ldi	r22, 0x07	; 7
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 11e:	08 95       	ret

00000120 <DCMotor_SetDir>:
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	b1 f0       	breq	.+44     	; 0x150 <DCMotor_SetDir+0x30>
 124:	18 f0       	brcs	.+6      	; 0x12c <DCMotor_SetDir+0xc>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	31 f1       	breq	.+76     	; 0x176 <DCMotor_SetDir+0x56>
 12a:	08 95       	ret
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	66 e0       	ldi	r22, 0x06	; 6
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	67 e0       	ldi	r22, 0x07	; 7
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	08 95       	ret
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	08 95       	ret
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 17e:	08 95       	ret

00000180 <DCMotor_SetSpeed>:
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 48 01 	sts	0x0148, r25	; 0x800148 <EINGELERNET>
 186:	80 93 47 01 	sts	0x0147, r24	; 0x800147 <GLOBAL_SPEED>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	88 23       	and	r24, r24
 190:	19 f0       	breq	.+6      	; 0x198 <DCMotor_SetSpeed+0x18>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	39 f0       	breq	.+14     	; 0x1a4 <DCMotor_SetSpeed+0x24>
 196:	08 95       	ret
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 1a2:	08 95       	ret
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 1ae:	08 95       	ret

000001b0 <DCMotor_Stop>:
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 1b8:	2f e9       	ldi	r18, 0x9F	; 159
 1ba:	86 e8       	ldi	r24, 0x86	; 134
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <DCMotor_Stop+0xe>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <DCMotor_Stop+0x18>
 1c8:	00 00       	nop
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <EINGELERNET>
 1dc:	10 92 47 01 	sts	0x0147, r1	; 0x800147 <GLOBAL_SPEED>
 1e0:	08 95       	ret

000001e2 <DC_Motor_Dir_Calc>:

DC_MOTOR_DIR DC_Motor_Dir_Calc(uint16 Desired_position , uint16 Sitting_Position )
{
	int Route = 0;
	
	if (Desired_position > Sitting_Position)
 1e2:	68 17       	cp	r22, r24
 1e4:	79 07       	cpc	r23, r25
 1e6:	60 f4       	brcc	.+24     	; 0x200 <DC_Motor_Dir_Calc+0x1e>
	{
		Route = Desired_position - Sitting_Position;
 1e8:	9c 01       	movw	r18, r24
 1ea:	26 1b       	sub	r18, r22
 1ec:	37 0b       	sbc	r19, r23

		if (Route > circle/2)
 1ee:	25 3b       	cpi	r18, 0xB5	; 181
 1f0:	31 05       	cpc	r19, r1
 1f2:	a8 f4       	brcc	.+42     	; 0x21e <DC_Motor_Dir_Calc+0x3c>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
		else if (Route < circle/2)
 1f4:	24 3b       	cpi	r18, 0xB4	; 180
 1f6:	31 05       	cpc	r19, r1
 1f8:	a0 f0       	brcs	.+40     	; 0x222 <DC_Motor_Dir_Calc+0x40>
		{
			return CLOCK_WISE_DIR;
		}
		else if (Route == circle/2)
 1fa:	24 3b       	cpi	r18, 0xB4	; 180
 1fc:	31 05       	cpc	r19, r1
 1fe:	99 f0       	breq	.+38     	; 0x226 <DC_Motor_Dir_Calc+0x44>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
	}
	
	if (Desired_position < Sitting_Position)
 200:	86 17       	cp	r24, r22
 202:	97 07       	cpc	r25, r23
 204:	58 f4       	brcc	.+22     	; 0x21c <DC_Motor_Dir_Calc+0x3a>
	{
		Route = Sitting_Position - Desired_position;
 206:	68 1b       	sub	r22, r24
 208:	79 0b       	sbc	r23, r25
		
		if (Route > circle/2)
 20a:	65 3b       	cpi	r22, 0xB5	; 181
 20c:	71 05       	cpc	r23, r1
 20e:	68 f4       	brcc	.+26     	; 0x22a <DC_Motor_Dir_Calc+0x48>
		{
			return CLOCK_WISE_DIR;
		}
		else if (Route < circle/2)
 210:	64 3b       	cpi	r22, 0xB4	; 180
 212:	71 05       	cpc	r23, r1
 214:	60 f0       	brcs	.+24     	; 0x22e <DC_Motor_Dir_Calc+0x4c>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
		else if (Route == circle/2)
 216:	64 3b       	cpi	r22, 0xB4	; 180
 218:	71 05       	cpc	r23, r1
 21a:	59 f0       	breq	.+22     	; 0x232 <DC_Motor_Dir_Calc+0x50>
		{
			return CLOCK_WISE_DIR;
		}
	}	
}
 21c:	08 95       	ret
	{
		Route = Desired_position - Sitting_Position;

		if (Route > circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
		}
		else if (Route < circle/2)
		{
			return CLOCK_WISE_DIR;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
		}
		else if (Route == circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
	{
		Route = Sitting_Position - Desired_position;
		
		if (Route > circle/2)
		{
			return CLOCK_WISE_DIR;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
		}
		else if (Route < circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
		}
		else if (Route == circle/2)
		{
			return CLOCK_WISE_DIR;
 232:	80 e0       	ldi	r24, 0x00	; 0
		}
	}	
}
 234:	08 95       	ret

00000236 <DIO_SetPinDir>:
	


void DIO_SetPinDir(uint8 Port, uint8 Pin, uint8 Dir)
{
	switch (Dir)
 236:	44 23       	and	r20, r20
 238:	59 f1       	breq	.+86     	; 0x290 <DIO_SetPinDir+0x5a>
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO_SetPinDir+0xa>
 23e:	51 c0       	rjmp	.+162    	; 0x2e2 <DIO_SetPinDir+0xac>
	{
		case DIO_PIN_OUTPUT :
		
			switch (Port)
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	81 f0       	breq	.+32     	; 0x264 <DIO_SetPinDir+0x2e>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	c9 f0       	breq	.+50     	; 0x27a <DIO_SetPinDir+0x44>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	09 f0       	breq	.+2      	; 0x24e <DIO_SetPinDir+0x18>
 24c:	4a c0       	rjmp	.+148    	; 0x2e2 <DIO_SetPinDir+0xac>
			{		
									
				case DIO_PORTB :
				SET_BIT(DDRB,Pin);
 24e:	24 b1       	in	r18, 0x04	; 4
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinDir+0x24>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinDir+0x20>
 25e:	82 2b       	or	r24, r18
 260:	84 b9       	out	0x04, r24	; 4
				break;
 262:	08 95       	ret
				
				case DIO_PORTC :
				SET_BIT(DDRC,Pin);
 264:	27 b1       	in	r18, 0x07	; 7
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinDir+0x3a>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinDir+0x36>
 274:	82 2b       	or	r24, r18
 276:	87 b9       	out	0x07, r24	; 7
				break;
 278:	08 95       	ret
				
				case DIO_PORTD :
				SET_BIT(DDRD,Pin);
 27a:	2a b1       	in	r18, 0x0a	; 10
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_SetPinDir+0x50>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_SetPinDir+0x4c>
 28a:	82 2b       	or	r24, r18
 28c:	8a b9       	out	0x0a, r24	; 10
				break;
 28e:	08 95       	ret
			}
			break;
		
		case DIO_PIN_INPUT :
		
			switch (Port)
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	81 f0       	breq	.+32     	; 0x2b4 <DIO_SetPinDir+0x7e>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	d1 f0       	breq	.+52     	; 0x2cc <DIO_SetPinDir+0x96>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	19 f5       	brne	.+70     	; 0x2e2 <DIO_SetPinDir+0xac>
			{

				case DIO_PORTB :
				CLR_BIT(DDRB,Pin);
 29c:	24 b1       	in	r18, 0x04	; 4
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDir+0x72>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDir+0x6e>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	84 b9       	out	0x04, r24	; 4
				break;
 2b2:	08 95       	ret
				
				case DIO_PORTC :
				CLR_BIT(DDRC,Pin);
 2b4:	27 b1       	in	r18, 0x07	; 7
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinDir+0x8a>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinDir+0x86>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	87 b9       	out	0x07, r24	; 7
				break;
 2ca:	08 95       	ret
				
				case DIO_PORTD :
				CLR_BIT(DDRD,Pin);
 2cc:	2a b1       	in	r18, 0x0a	; 10
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_SetPinDir+0xa2>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_SetPinDir+0x9e>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8a b9       	out	0x0a, r24	; 10
 2e2:	08 95       	ret

000002e4 <DIO_SetPortValue>:
}


void DIO_SetPortValue(uint8 Port, uint8 Val)
{
	switch (Port)
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <DIO_SetPortValue+0x10>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <DIO_SetPortValue+0x14>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	29 f4       	brne	.+10     	; 0x2fa <DIO_SetPortValue+0x16>
	{

			
		case DIO_PORTB :
		
		PORTB = Val ;
 2f0:	65 b9       	out	0x05, r22	; 5
		
		break ;
 2f2:	08 95       	ret
		
		case DIO_PORTC :
		
		PORTC = Val ;
 2f4:	68 b9       	out	0x08, r22	; 8
		
		break ;
 2f6:	08 95       	ret
		
		case DIO_PORTD :
		
		PORTD = Val ;
 2f8:	6b b9       	out	0x0b, r22	; 11
 2fa:	08 95       	ret

000002fc <DIO_SetPinValue>:
	}	
	
}
void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Val)
{
	switch (Val)
 2fc:	44 23       	and	r20, r20
 2fe:	59 f1       	breq	.+86     	; 0x356 <DIO_SetPinValue+0x5a>
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <DIO_SetPinValue+0xa>
 304:	51 c0       	rjmp	.+162    	; 0x3a8 <DIO_SetPinValue+0xac>
	{
		case DIO_PIN_HIGH :
		switch (Port)
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	81 f0       	breq	.+32     	; 0x32a <DIO_SetPinValue+0x2e>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	c9 f0       	breq	.+50     	; 0x340 <DIO_SetPinValue+0x44>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_SetPinValue+0x18>
 312:	4a c0       	rjmp	.+148    	; 0x3a8 <DIO_SetPinValue+0xac>
		{
				
			case DIO_PORTB :
			SET_BIT(PORTB,Pin);
 314:	25 b1       	in	r18, 0x05	; 5
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_SetPinValue+0x24>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_SetPinValue+0x20>
 324:	82 2b       	or	r24, r18
 326:	85 b9       	out	0x05, r24	; 5
			break;
 328:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC,Pin);
 32a:	28 b1       	in	r18, 0x08	; 8
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinValue+0x3a>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinValue+0x36>
 33a:	82 2b       	or	r24, r18
 33c:	88 b9       	out	0x08, r24	; 8
			break;
 33e:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD,Pin);
 340:	2b b1       	in	r18, 0x0b	; 11
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_SetPinValue+0x50>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_SetPinValue+0x4c>
 350:	82 2b       	or	r24, r18
 352:	8b b9       	out	0x0b, r24	; 11
			break;
 354:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW :
		switch (Port)
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	81 f0       	breq	.+32     	; 0x37a <DIO_SetPinValue+0x7e>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	d1 f0       	breq	.+52     	; 0x392 <DIO_SetPinValue+0x96>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	19 f5       	brne	.+70     	; 0x3a8 <DIO_SetPinValue+0xac>
		{

		
			case DIO_PORTB :
			CLR_BIT(PORTB,Pin);
 362:	25 b1       	in	r18, 0x05	; 5
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPinValue+0x72>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPinValue+0x6e>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	85 b9       	out	0x05, r24	; 5
			break;
 378:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC,Pin);
 37a:	28 b1       	in	r18, 0x08	; 8
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinValue+0x8a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinValue+0x86>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	88 b9       	out	0x08, r24	; 8
			break;
 390:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD,Pin);
 392:	2b b1       	in	r18, 0x0b	; 11
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinValue+0xa2>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinValue+0x9e>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	08 95       	ret

000003aa <ENC_Init>:

	

void ENC_Init()
{
	DIO_SetPinDir(ENC_PORT , DO , DIO_PIN_INPUT );
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	64 e0       	ldi	r22, 0x04	; 4
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(ENC_PORT , Clk, DIO_PIN_OUTPUT);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	63 e0       	ldi	r22, 0x03	; 3
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(ENC_PORT , CS, DIO_PIN_OUTPUT);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	00 00       	nop
 3ca:	08 95       	ret

000003cc <ENC_Read>:
	_delay_us(1);

}

uint16 ENC_Read(void)
{
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	uint16 ANGLE = 0;
	

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 3e0:	00 00       	nop
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 3e2:	10 e0       	ldi	r17, 0x00	; 0

}

uint16 ENC_Read(void)
{
	uint16 ANGLE = 0;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 3e8:	16 c0       	rjmp	.+44     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{

		DIO_SetPinValue(ENC_PORT , Clk, DIO_PIN_LOW );
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 3f4:	00 00       	nop
		_delay_us(1);
		DIO_SetPinValue(ENC_PORT , Clk, DIO_PIN_HIGH );
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 400:	00 00       	nop
		_delay_us(1);	
		
		ANGLE = (ANGLE << 1) | GET_BIT(PIND,DO);
 402:	cc 0f       	add	r28, r28
 404:	dd 1f       	adc	r29, r29
 406:	89 b1       	in	r24, 0x09	; 9
 408:	84 fb       	bst	r24, 4
 40a:	ee 24       	eor	r14, r14
 40c:	e0 f8       	bld	r14, 0
 40e:	f1 2c       	mov	r15, r1
 410:	ce 29       	or	r28, r14
 412:	df 29       	or	r29, r15

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 414:	1f 5f       	subi	r17, 0xFF	; 255
 416:	1c 30       	cpi	r17, 0x0C	; 12
 418:	40 f3       	brcs	.-48     	; 0x3ea <ENC_Read+0x1e>
		_delay_us(1);	
		
		ANGLE = (ANGLE << 1) | GET_BIT(PIND,DO);
	}
	
	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_HIGH );
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
	
	return ANGLE;	
}
 424:	ce 01       	movw	r24, r28
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	08 95       	ret

00000432 <ENC_Read_In_Degree>:

uint16 ENC_Read_In_Degree(void)   //--> Output is a degree between 0 and 360
{
	uint16 degree = 0;
	
	degree = (uint16)((float)ENC_Read() / step) ;
 432:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ENC_Read>
 436:	bc 01       	movw	r22, r24
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 6e 05 	call	0xadc	; 0xadc <__floatunsisf>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	46 e3       	ldi	r20, 0x36	; 54
 446:	51 e4       	ldi	r21, 0x41	; 65
 448:	0e 94 cd 04 	call	0x99a	; 0x99a <__divsf3>
 44c:	0e 94 3f 05 	call	0xa7e	; 0xa7e <__fixunssfsi>

	//degree = (uint16)((float)ENC_Read_avg() / step) ;
	return (uint16)degree;
}
 450:	cb 01       	movw	r24, r22
 452:	08 95       	ret

00000454 <__vector_11>:




ISR (TIMER1_COMPA_vect)
{
 454:	1f 92       	push	r1
 456:	0f 92       	push	r0
 458:	0f b6       	in	r0, 0x3f	; 63
 45a:	0f 92       	push	r0
 45c:	11 24       	eor	r1, r1
 45e:	2f 93       	push	r18
 460:	3f 93       	push	r19
 462:	4f 93       	push	r20
 464:	5f 93       	push	r21
 466:	6f 93       	push	r22
 468:	7f 93       	push	r23
 46a:	8f 93       	push	r24
 46c:	9f 93       	push	r25
 46e:	af 93       	push	r26
 470:	bf 93       	push	r27
 472:	ef 93       	push	r30
 474:	ff 93       	push	r31
	static uint8 cnt = 0;
	
	cnt++;
 476:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 47a:	8f 5f       	subi	r24, 0xFF	; 255
 47c:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	
	if(cnt == 1)
 480:	81 30       	cpi	r24, 0x01	; 1
 482:	79 f4       	brne	.+30     	; 0x4a2 <__vector_11+0x4e>
	{
		cnt = 0;
 484:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		
		UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 488:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 48c:	4a e0       	ldi	r20, 0x0A	; 10
 48e:	50 e0       	ldi	r21, 0x00	; 0
 490:	62 e0       	ldi	r22, 0x02	; 2
 492:	71 e0       	ldi	r23, 0x01	; 1
 494:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <itoa>
 498:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_SendString>
		UART_SendByte('\n');
 49c:	8a e0       	ldi	r24, 0x0A	; 10
 49e:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
		//UART_Send_Degree(ENC_Read_In_Degree());
		
		//UART_SendByte(ENC_Read_In_Degree());
	}
	
}
 4a2:	ff 91       	pop	r31
 4a4:	ef 91       	pop	r30
 4a6:	bf 91       	pop	r27
 4a8:	af 91       	pop	r26
 4aa:	9f 91       	pop	r25
 4ac:	8f 91       	pop	r24
 4ae:	7f 91       	pop	r23
 4b0:	6f 91       	pop	r22
 4b2:	5f 91       	pop	r21
 4b4:	4f 91       	pop	r20
 4b6:	3f 91       	pop	r19
 4b8:	2f 91       	pop	r18
 4ba:	0f 90       	pop	r0
 4bc:	0f be       	out	0x3f, r0	; 63
 4be:	0f 90       	pop	r0
 4c0:	1f 90       	pop	r1
 4c2:	18 95       	reti

000004c4 <Calibration>:


void Calibration(void)
{
	DCMotor_SetDir(CLOCK_WISE_DIR);
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
	DCMotor_SetSpeed(10);
 4ca:	8a e0       	ldi	r24, 0x0A	; 10
 4cc:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4d0:	2f ef       	ldi	r18, 0xFF	; 255
 4d2:	8f e0       	ldi	r24, 0x0F	; 15
 4d4:	97 e2       	ldi	r25, 0x27	; 39
 4d6:	21 50       	subi	r18, 0x01	; 1
 4d8:	80 40       	sbci	r24, 0x00	; 0
 4da:	90 40       	sbci	r25, 0x00	; 0
 4dc:	e1 f7       	brne	.-8      	; 0x4d6 <Calibration+0x12>
 4de:	00 c0       	rjmp	.+0      	; 0x4e0 <Calibration+0x1c>
 4e0:	00 00       	nop
	
	_delay_ms(800);
	
	DCMotor_Stop();
 4e2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 4e6:	2f ef       	ldi	r18, 0xFF	; 255
 4e8:	89 e6       	ldi	r24, 0x69	; 105
 4ea:	98 e1       	ldi	r25, 0x18	; 24
 4ec:	21 50       	subi	r18, 0x01	; 1
 4ee:	80 40       	sbci	r24, 0x00	; 0
 4f0:	90 40       	sbci	r25, 0x00	; 0
 4f2:	e1 f7       	brne	.-8      	; 0x4ec <Calibration+0x28>
 4f4:	00 c0       	rjmp	.+0      	; 0x4f6 <Calibration+0x32>
 4f6:	00 00       	nop
	_delay_ms(500);
	
	max_right_angle = ENC_Read_In_Degree();
 4f8:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 4fc:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <max_right_angle+0x1>
 500:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <max_right_angle>
	
	
	DCMotor_SetDir(ANTI_CLOCK_WISE_DIR);
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
	DCMotor_SetSpeed(10);
 50a:	8a e0       	ldi	r24, 0x0A	; 10
 50c:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 510:	2f ef       	ldi	r18, 0xFF	; 255
 512:	8f e0       	ldi	r24, 0x0F	; 15
 514:	97 e2       	ldi	r25, 0x27	; 39
 516:	21 50       	subi	r18, 0x01	; 1
 518:	80 40       	sbci	r24, 0x00	; 0
 51a:	90 40       	sbci	r25, 0x00	; 0
 51c:	e1 f7       	brne	.-8      	; 0x516 <Calibration+0x52>
 51e:	00 c0       	rjmp	.+0      	; 0x520 <Calibration+0x5c>
 520:	00 00       	nop
	
	_delay_ms(800);
	
	DCMotor_Stop();
 522:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 526:	2f ef       	ldi	r18, 0xFF	; 255
 528:	89 e6       	ldi	r24, 0x69	; 105
 52a:	98 e1       	ldi	r25, 0x18	; 24
 52c:	21 50       	subi	r18, 0x01	; 1
 52e:	80 40       	sbci	r24, 0x00	; 0
 530:	90 40       	sbci	r25, 0x00	; 0
 532:	e1 f7       	brne	.-8      	; 0x52c <Calibration+0x68>
 534:	00 c0       	rjmp	.+0      	; 0x536 <Calibration+0x72>
 536:	00 00       	nop
	_delay_ms(500);

	
	max_left_angle = ENC_Read_In_Degree();
 538:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 53c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <max_left_angle+0x1>
 540:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <max_left_angle>
	
	if(max_right_angle > max_left_angle)
 544:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <max_right_angle>
 548:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <max_right_angle+0x1>
 54c:	82 17       	cp	r24, r18
 54e:	93 07       	cpc	r25, r19
 550:	7c f4       	brge	.+30     	; 0x570 <Calibration+0xac>
	{

		Middle_Position = max_left_angle + ((max_right_angle - max_left_angle) / 2 );
 552:	28 1b       	sub	r18, r24
 554:	39 0b       	sbc	r19, r25
 556:	a9 01       	movw	r20, r18
 558:	12 f4       	brpl	.+4      	; 0x55e <Calibration+0x9a>
 55a:	4f 5f       	subi	r20, 0xFF	; 255
 55c:	5f 4f       	sbci	r21, 0xFF	; 255
 55e:	55 95       	asr	r21
 560:	47 95       	ror	r20
 562:	48 0f       	add	r20, r24
 564:	59 1f       	adc	r21, r25
 566:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <Middle_Position+0x1>
 56a:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <Middle_Position>
 56e:	1f c0       	rjmp	.+62     	; 0x5ae <Calibration+0xea>

	}
	else
	{
		Middle_Position = (max_left_angle + max_right_angle) / 2;
 570:	28 0f       	add	r18, r24
 572:	39 1f       	adc	r19, r25
 574:	33 23       	and	r19, r19
 576:	14 f4       	brge	.+4      	; 0x57c <Calibration+0xb8>
 578:	2f 5f       	subi	r18, 0xFF	; 255
 57a:	3f 4f       	sbci	r19, 0xFF	; 255
 57c:	35 95       	asr	r19
 57e:	27 95       	ror	r18
 580:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <Middle_Position+0x1>
 584:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <Middle_Position>
		if(Middle_Position > (circle / 2))
 588:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <circle>
 58c:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <circle+0x1>
 590:	55 23       	and	r21, r21
 592:	14 f4       	brge	.+4      	; 0x598 <Calibration+0xd4>
 594:	4f 5f       	subi	r20, 0xFF	; 255
 596:	5f 4f       	sbci	r21, 0xFF	; 255
 598:	55 95       	asr	r21
 59a:	47 95       	ror	r20
 59c:	42 17       	cp	r20, r18
 59e:	53 07       	cpc	r21, r19
 5a0:	34 f4       	brge	.+12     	; 0x5ae <Calibration+0xea>
		{
			
			Middle_Position -= (circle /2);
 5a2:	24 1b       	sub	r18, r20
 5a4:	35 0b       	sbc	r19, r21
 5a6:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <Middle_Position+0x1>
 5aa:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <Middle_Position>
		}
	}
	
	eeprom_update_word((uint16 *) LEFT_ADDR , max_left_angle);
 5ae:	bc 01       	movw	r22, r24
 5b0:	80 e2       	ldi	r24, 0x20	; 32
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	0e 94 42 06 	call	0xc84	; 0xc84 <eeprom_update_word>
	eeprom_update_word((uint16 *) RIGHT_ADDR , max_right_angle);
 5b8:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <max_right_angle>
 5bc:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <max_right_angle+0x1>
 5c0:	80 e1       	ldi	r24, 0x10	; 16
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	0e 94 42 06 	call	0xc84	; 0xc84 <eeprom_update_word>
	eeprom_update_word((uint16 *) MIDDLE_ADDR , Middle_Position);
 5c8:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Middle_Position>
 5cc:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <Middle_Position+0x1>
 5d0:	80 e0       	ldi	r24, 0x00	; 0
 5d2:	90 e0       	ldi	r25, 0x00	; 0
 5d4:	0e 94 42 06 	call	0xc84	; 0xc84 <eeprom_update_word>
	
	EINGELERNET = true;
 5d8:	81 e0       	ldi	r24, 0x01	; 1
 5da:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <EINGELERNET>
 5de:	08 95       	ret

000005e0 <main>:


int main(void)
{
	
	DCMotor_Init();
 5e0:	0e 94 80 00 	call	0x100	; 0x100 <DCMotor_Init>
	ENC_Init();
 5e4:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ENC_Init>
	UART_Init();
 5e8:	0e 94 6d 03 	call	0x6da	; 0x6da <UART_Init>
	ADC_Init();
 5ec:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	Dip_Switch_Init();
 5f0:	0e 94 d5 03 	call	0x7aa	; 0x7aa <Dip_Switch_Init>
	Update_Boundries();
 5f4:	0e 94 ae 04 	call	0x95c	; 0x95c <Update_Boundries>
	
	//Timer1_SetDelay(30);
	
	//Timer1_Start();
	
	if(Middle_Position == 0xFF)
 5f8:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Middle_Position>
 5fc:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Middle_Position+0x1>
 600:	8f 3f       	cpi	r24, 0xFF	; 255
 602:	91 05       	cpc	r25, r1
 604:	11 f4       	brne	.+4      	; 0x60a <main+0x2a>
	{
		EINGELERNET = false;
 606:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <EINGELERNET>
    /* Replace with your application code */
    while (1) 
    {

		
		Update_Mode();
 60a:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <Update_Mode>
		if(mode == CALIBRATION_MODE)
 60e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 612:	81 11       	cpse	r24, r1
 614:	02 c0       	rjmp	.+4      	; 0x61a <main+0x3a>
		{
			Calibration();
 616:	0e 94 62 02 	call	0x4c4	; 0x4c4 <Calibration>
		}
		if(mode == DRIVING_MODE)
 61a:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 61e:	81 30       	cpi	r24, 0x01	; 1
 620:	09 f0       	breq	.+2      	; 0x624 <main+0x44>
 622:	4d c0       	rjmp	.+154    	; 0x6be <main+0xde>
			
			//Update_Global_ADC_Direction();
			//ADC_DRIVE_TEST();	
			//Drive_Untill_Reach_End();		
			//Drive_Untill_Reach_End();
			CABLES_READ();
 624:	0e 94 a2 03 	call	0x744	; 0x744 <CABLES_READ>
			FAHREN();
 628:	0e 94 a3 04 	call	0x946	; 0x946 <FAHREN>
			//Generic_Drive();
			
			if((Read_ADC(PINK_CABLE) < 400) && (Read_ADC(BLUE_CABLE) < 400))
 62c:	80 e0       	ldi	r24, 0x00	; 0
 62e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 632:	80 39       	cpi	r24, 0x90	; 144
 634:	91 40       	sbci	r25, 0x01	; 1
 636:	08 f0       	brcs	.+2      	; 0x63a <main+0x5a>
 638:	42 c0       	rjmp	.+132    	; 0x6be <main+0xde>
 63a:	81 e0       	ldi	r24, 0x01	; 1
 63c:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 640:	80 39       	cpi	r24, 0x90	; 144
 642:	91 40       	sbci	r25, 0x01	; 1
 644:	e0 f5       	brcc	.+120    	; 0x6be <main+0xde>
			{
				if(POSITION != MIDDLE)
 646:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <POSITION>
 64a:	90 91 4e 01 	lds	r25, 0x014E	; 0x80014e <__bss_end>
 64e:	02 97       	sbiw	r24, 0x02	; 2
 650:	b1 f1       	breq	.+108    	; 0x6be <main+0xde>
				{
					 ziel = Middle_Position;
 652:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Middle_Position>
 656:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Middle_Position+0x1>
 65a:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <ziel+0x1>
 65e:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <ziel>

					 DCMotor_SetDir(DC_Motor_Dir_Calc(ziel , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
 662:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 666:	bc 01       	movw	r22, r24
 668:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <ziel>
 66c:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <ziel+0x1>
 670:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 674:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
					 DCMotor_SetSpeed(10);
 678:	8a e0       	ldi	r24, 0x0A	; 10
 67a:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
					 while(!(abs(ziel - ENC_Read_In_Degree()  < 3))) // The programm will be stuck here until DC Motor get close to the Desired position
 67e:	0d c0       	rjmp	.+26     	; 0x69a <main+0xba>
					 {
						 	UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 680:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 684:	4a e0       	ldi	r20, 0x0A	; 10
 686:	50 e0       	ldi	r21, 0x00	; 0
 688:	62 e0       	ldi	r22, 0x02	; 2
 68a:	71 e0       	ldi	r23, 0x01	; 1
 68c:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <itoa>
 690:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_SendString>
						 	UART_SendByte('\n');
 694:	8a e0       	ldi	r24, 0x0A	; 10
 696:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
				{
					 ziel = Middle_Position;

					 DCMotor_SetDir(DC_Motor_Dir_Calc(ziel , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
					 DCMotor_SetSpeed(10);
					 while(!(abs(ziel - ENC_Read_In_Degree()  < 3))) // The programm will be stuck here until DC Motor get close to the Desired position
 69a:	c0 91 45 01 	lds	r28, 0x0145	; 0x800145 <ziel>
 69e:	d0 91 46 01 	lds	r29, 0x0146	; 0x800146 <ziel+0x1>
 6a2:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 6a6:	c8 1b       	sub	r28, r24
 6a8:	d9 0b       	sbc	r29, r25
 6aa:	23 97       	sbiw	r28, 0x03	; 3
 6ac:	48 f7       	brcc	.-46     	; 0x680 <main+0xa0>
					 {
						 	UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
						 	UART_SendByte('\n');
					 }
					 DCMotor_Stop();
 6ae:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
					 POSITION = MIDDLE;
 6b2:	82 e0       	ldi	r24, 0x02	; 2
 6b4:	90 e0       	ldi	r25, 0x00	; 0
 6b6:	90 93 4e 01 	sts	0x014E, r25	; 0x80014e <__bss_end>
 6ba:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <POSITION>
				}
			} 
		}	
		UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 6be:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 6c2:	4a e0       	ldi	r20, 0x0A	; 10
 6c4:	50 e0       	ldi	r21, 0x00	; 0
 6c6:	62 e0       	ldi	r22, 0x02	; 2
 6c8:	71 e0       	ldi	r23, 0x01	; 1
 6ca:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <itoa>
 6ce:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_SendString>
		UART_SendByte('\n');		
 6d2:	8a e0       	ldi	r24, 0x0A	; 10
 6d4:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
		
	}
 6d8:	98 cf       	rjmp	.-208    	; 0x60a <main+0x2a>

000006da <UART_Init>:
void UART_Init(void)
{
	
	uint32 BR_Value = 0;
	
	DIO_SetPinDir(PORTD, PIND0, DIO_PIN_INPUT);
 6da:	8b b1       	in	r24, 0x0b	; 11
 6dc:	40 e0       	ldi	r20, 0x00	; 0
 6de:	60 e0       	ldi	r22, 0x00	; 0
 6e0:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(PORTD, PIND1, DIO_PIN_OUTPUT);
 6e4:	8b b1       	in	r24, 0x0b	; 11
 6e6:	41 e0       	ldi	r20, 0x01	; 1
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	


	UCSR0B |= 0x18 ; // --> RXEN0 - TXEN0 --> Enabled Transmit and Receive
 6ee:	e1 ec       	ldi	r30, 0xC1	; 193
 6f0:	f0 e0       	ldi	r31, 0x00	; 0
 6f2:	80 81       	ld	r24, Z
 6f4:	88 61       	ori	r24, 0x18	; 24
 6f6:	80 83       	st	Z, r24
	//UCSR0B |= 0xC0 ; // --> RXCIE0 - TXCIE0 --> to enable uart RX and TX Interrupt if you don't want Interrupt and keep polling just Comment the line 
	UCSR0C |= 0x06 ; // --> Only  UCSZ00 and UCSZ01 are set --> 8-Bit Frame
 6f8:	e2 ec       	ldi	r30, 0xC2	; 194
 6fa:	f0 e0       	ldi	r31, 0x00	; 0
 6fc:	80 81       	ld	r24, Z
 6fe:	86 60       	ori	r24, 0x06	; 6
 700:	80 83       	st	Z, r24
	#endif
	
	
	//BR_Value = ((160000) / (16 * (192))) - 1;
	
	UBRR0H = (BR_Value) >> 8;
 702:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (BR_Value & 0xFF);
 706:	87 e6       	ldi	r24, 0x67	; 103
 708:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 70c:	08 95       	ret

0000070e <UART_SendByte>:
	/*
	UDR0 = data;
	
	while(GET_BIT(UCSR0A , 5) == 0 );
	*/
	while(!(UCSR0A & (1 << UDRE0 )));
 70e:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 712:	95 ff       	sbrs	r25, 5
 714:	fc cf       	rjmp	.-8      	; 0x70e <UART_SendByte>
	
	UDR0 = data;
 716:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 71a:	08 95       	ret

0000071c <UART_SendString>:
	
}

void UART_SendString(uint8* str)
{
 71c:	cf 93       	push	r28
	uint8 i = 0;
 71e:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(UART_BUFFER[i] != '\0')
 720:	07 c0       	rjmp	.+14     	; 0x730 <UART_SendString+0x14>
	{
		UART_SendByte(UART_BUFFER[i]);
 722:	fc 01       	movw	r30, r24
 724:	ee 5f       	subi	r30, 0xFE	; 254
 726:	fe 4f       	sbci	r31, 0xFE	; 254
 728:	80 81       	ld	r24, Z
 72a:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
		i++;
 72e:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(uint8* str)
{
	uint8 i = 0;
	
	while(UART_BUFFER[i] != '\0')
 730:	8c 2f       	mov	r24, r28
 732:	90 e0       	ldi	r25, 0x00	; 0
 734:	fc 01       	movw	r30, r24
 736:	ee 5f       	subi	r30, 0xFE	; 254
 738:	fe 4f       	sbci	r31, 0xFE	; 254
 73a:	20 81       	ld	r18, Z
 73c:	21 11       	cpse	r18, r1
 73e:	f1 cf       	rjmp	.-30     	; 0x722 <UART_SendString+0x6>
	{
		UART_SendByte(UART_BUFFER[i]);
		i++;
	}
		
}
 740:	cf 91       	pop	r28
 742:	08 95       	ret

00000744 <CABLES_READ>:
{
	DCMotor_SetDir(DC_Motor_Dir_Calc(Desired_Degree , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
	DCMotor_SetSpeed(10);
	while(!(abs(Desired_Degree - ENC_Read_In_Degree() ) < 3)); // The programm will be stuck here until DC Motor get close to the Desired position
	DCMotor_Stop();	
}
 744:	80 e0       	ldi	r24, 0x00	; 0
 746:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 74a:	81 39       	cpi	r24, 0x91	; 145
 74c:	91 40       	sbci	r25, 0x01	; 1
 74e:	18 f0       	brcs	.+6      	; 0x756 <CABLES_READ+0x12>
 750:	81 e0       	ldi	r24, 0x01	; 1
 752:	80 93 4a 01 	sts	0x014A, r24	; 0x80014a <cables>
 756:	81 e0       	ldi	r24, 0x01	; 1
 758:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 75c:	81 39       	cpi	r24, 0x91	; 145
 75e:	91 40       	sbci	r25, 0x01	; 1
 760:	18 f0       	brcs	.+6      	; 0x768 <CABLES_READ+0x24>
 762:	81 e0       	ldi	r24, 0x01	; 1
 764:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <cables+0x1>
 768:	80 e0       	ldi	r24, 0x00	; 0
 76a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 76e:	80 39       	cpi	r24, 0x90	; 144
 770:	91 40       	sbci	r25, 0x01	; 1
 772:	10 f4       	brcc	.+4      	; 0x778 <CABLES_READ+0x34>
 774:	10 92 4a 01 	sts	0x014A, r1	; 0x80014a <cables>
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 77e:	80 39       	cpi	r24, 0x90	; 144
 780:	91 40       	sbci	r25, 0x01	; 1
 782:	10 f4       	brcc	.+4      	; 0x788 <CABLES_READ+0x44>
 784:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <cables+0x1>
 788:	80 e0       	ldi	r24, 0x00	; 0
 78a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 78e:	81 39       	cpi	r24, 0x91	; 145
 790:	91 40       	sbci	r25, 0x01	; 1
 792:	50 f0       	brcs	.+20     	; 0x7a8 <CABLES_READ+0x64>
 794:	81 e0       	ldi	r24, 0x01	; 1
 796:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 79a:	81 39       	cpi	r24, 0x91	; 145
 79c:	91 40       	sbci	r25, 0x01	; 1
 79e:	20 f0       	brcs	.+8      	; 0x7a8 <CABLES_READ+0x64>
 7a0:	ea e4       	ldi	r30, 0x4A	; 74
 7a2:	f1 e0       	ldi	r31, 0x01	; 1
 7a4:	11 82       	std	Z+1, r1	; 0x01
 7a6:	10 82       	st	Z, r1
 7a8:	08 95       	ret

000007aa <Dip_Switch_Init>:
 7aa:	40 e0       	ldi	r20, 0x00	; 0
 7ac:	64 e0       	ldi	r22, 0x04	; 4
 7ae:	82 e0       	ldi	r24, 0x02	; 2
 7b0:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 7b4:	40 e0       	ldi	r20, 0x00	; 0
 7b6:	65 e0       	ldi	r22, 0x05	; 5
 7b8:	82 e0       	ldi	r24, 0x02	; 2
 7ba:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 7be:	08 95       	ret

000007c0 <Update_Mode>:
 7c0:	cf 93       	push	r28
 7c2:	df 93       	push	r29
 7c4:	85 e0       	ldi	r24, 0x05	; 5
 7c6:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 7ca:	ec 01       	movw	r28, r24
 7cc:	84 e0       	ldi	r24, 0x04	; 4
 7ce:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 7d2:	c1 39       	cpi	r28, 0x91	; 145
 7d4:	21 e0       	ldi	r18, 0x01	; 1
 7d6:	d2 07       	cpc	r29, r18
 7d8:	40 f0       	brcs	.+16     	; 0x7ea <Update_Mode+0x2a>
 7da:	80 39       	cpi	r24, 0x90	; 144
 7dc:	21 e0       	ldi	r18, 0x01	; 1
 7de:	92 07       	cpc	r25, r18
 7e0:	20 f4       	brcc	.+8      	; 0x7ea <Update_Mode+0x2a>
 7e2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_BUFFER>
 7e6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mode>
 7ea:	81 39       	cpi	r24, 0x91	; 145
 7ec:	21 e0       	ldi	r18, 0x01	; 1
 7ee:	92 07       	cpc	r25, r18
 7f0:	50 f0       	brcs	.+20     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7f2:	c0 39       	cpi	r28, 0x90	; 144
 7f4:	21 e0       	ldi	r18, 0x01	; 1
 7f6:	d2 07       	cpc	r29, r18
 7f8:	30 f4       	brcc	.+12     	; 0x806 <__DATA_REGION_LENGTH__+0x6>
 7fa:	21 e0       	ldi	r18, 0x01	; 1
 7fc:	30 e0       	ldi	r19, 0x00	; 0
 7fe:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <UART_BUFFER>
 802:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <mode>
 806:	80 39       	cpi	r24, 0x90	; 144
 808:	21 e0       	ldi	r18, 0x01	; 1
 80a:	92 07       	cpc	r25, r18
 80c:	20 f4       	brcc	.+8      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 80e:	c0 39       	cpi	r28, 0x90	; 144
 810:	21 e0       	ldi	r18, 0x01	; 1
 812:	d2 07       	cpc	r29, r18
 814:	30 f0       	brcs	.+12     	; 0x822 <__DATA_REGION_LENGTH__+0x22>
 816:	81 39       	cpi	r24, 0x91	; 145
 818:	91 40       	sbci	r25, 0x01	; 1
 81a:	48 f0       	brcs	.+18     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 81c:	c1 39       	cpi	r28, 0x91	; 145
 81e:	d1 40       	sbci	r29, 0x01	; 1
 820:	30 f0       	brcs	.+12     	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
 822:	82 e0       	ldi	r24, 0x02	; 2
 824:	90 e0       	ldi	r25, 0x00	; 0
 826:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <UART_BUFFER>
 82a:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mode>
 82e:	df 91       	pop	r29
 830:	cf 91       	pop	r28
 832:	08 95       	ret

00000834 <Drive_To_Max_Right>:
 834:	0f 93       	push	r16
 836:	1f 93       	push	r17
 838:	cf 93       	push	r28
 83a:	df 93       	push	r29
 83c:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <POSITION>
 840:	88 23       	and	r24, r24
 842:	a1 f1       	breq	.+104    	; 0x8ac <Drive_To_Max_Right+0x78>
 844:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <max_right_angle>
 848:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <max_right_angle+0x1>
 84c:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 850:	bc 01       	movw	r22, r24
 852:	c8 01       	movw	r24, r16
 854:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 858:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
 85c:	8a e0       	ldi	r24, 0x0A	; 10
 85e:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 862:	10 c0       	rjmp	.+32     	; 0x884 <Drive_To_Max_Right+0x50>
 864:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <UART_BUFFER>
 868:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <UART_BUFFER+0x1>
 86c:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 870:	4a e0       	ldi	r20, 0x0A	; 10
 872:	50 e0       	ldi	r21, 0x00	; 0
 874:	be 01       	movw	r22, r28
 876:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <itoa>
 87a:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_SendString>
 87e:	8a e0       	ldi	r24, 0x0A	; 10
 880:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
 884:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 888:	98 01       	movw	r18, r16
 88a:	28 1b       	sub	r18, r24
 88c:	39 0b       	sbc	r19, r25
 88e:	23 30       	cpi	r18, 0x03	; 3
 890:	31 05       	cpc	r19, r1
 892:	40 f7       	brcc	.-48     	; 0x864 <Drive_To_Max_Right+0x30>
 894:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 898:	10 92 4d 01 	sts	0x014D, r1	; 0x80014d <POSITION>
 89c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <max_right_angle>
 8a0:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <max_right_angle+0x1>
 8a4:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Reached_Position+0x1>
 8a8:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Reached_Position>
 8ac:	df 91       	pop	r29
 8ae:	cf 91       	pop	r28
 8b0:	1f 91       	pop	r17
 8b2:	0f 91       	pop	r16
 8b4:	08 95       	ret

000008b6 <Drive_To_Max_Left>:
 8b6:	0f 93       	push	r16
 8b8:	1f 93       	push	r17
 8ba:	cf 93       	push	r28
 8bc:	df 93       	push	r29
 8be:	80 91 4d 01 	lds	r24, 0x014D	; 0x80014d <POSITION>
 8c2:	81 30       	cpi	r24, 0x01	; 1
 8c4:	d9 f1       	breq	.+118    	; 0x93c <__stack+0x3d>
 8c6:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <max_left_angle>
 8ca:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <max_left_angle+0x1>
 8ce:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 8d2:	bc 01       	movw	r22, r24
 8d4:	c8 01       	movw	r24, r16
 8d6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 8da:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
 8de:	8a e0       	ldi	r24, 0x0A	; 10
 8e0:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 8e4:	10 c0       	rjmp	.+32     	; 0x906 <__stack+0x7>
 8e6:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <UART_BUFFER>
 8ea:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <UART_BUFFER+0x1>
 8ee:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 8f2:	4a e0       	ldi	r20, 0x0A	; 10
 8f4:	50 e0       	ldi	r21, 0x00	; 0
 8f6:	be 01       	movw	r22, r28
 8f8:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <itoa>
 8fc:	0e 94 8e 03 	call	0x71c	; 0x71c <UART_SendString>
 900:	8a e0       	ldi	r24, 0x0A	; 10
 902:	0e 94 87 03 	call	0x70e	; 0x70e <UART_SendByte>
 906:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 90a:	98 01       	movw	r18, r16
 90c:	28 1b       	sub	r18, r24
 90e:	39 0b       	sbc	r19, r25
 910:	c9 01       	movw	r24, r18
 912:	99 23       	and	r25, r25
 914:	24 f4       	brge	.+8      	; 0x91e <__stack+0x1f>
 916:	88 27       	eor	r24, r24
 918:	99 27       	eor	r25, r25
 91a:	82 1b       	sub	r24, r18
 91c:	93 0b       	sbc	r25, r19
 91e:	02 97       	sbiw	r24, 0x02	; 2
 920:	14 f7       	brge	.-60     	; 0x8e6 <Drive_To_Max_Left+0x30>
 922:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 926:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <max_left_angle>
 92a:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <max_left_angle+0x1>
 92e:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Reached_Position+0x1>
 932:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Reached_Position>
 936:	81 e0       	ldi	r24, 0x01	; 1
 938:	80 93 4d 01 	sts	0x014D, r24	; 0x80014d <POSITION>
 93c:	df 91       	pop	r29
 93e:	cf 91       	pop	r28
 940:	1f 91       	pop	r17
 942:	0f 91       	pop	r16
 944:	08 95       	ret

00000946 <FAHREN>:
 946:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <cables+0x1>
 94a:	81 11       	cpse	r24, r1
 94c:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <Drive_To_Max_Left>
 950:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <cables>
 954:	81 11       	cpse	r24, r1
 956:	0e 94 1a 04 	call	0x834	; 0x834 <Drive_To_Max_Right>
 95a:	08 95       	ret

0000095c <Update_Boundries>:


void Update_Boundries(void)
{
	max_right_angle = eeprom_read_word (  (uint16 *) RIGHT_ADDR );
 95c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <RIGHT_ADDR>
 960:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <RIGHT_ADDR+0x1>
 964:	0e 94 3c 06 	call	0xc78	; 0xc78 <eeprom_read_word>
 968:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <max_right_angle+0x1>
 96c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <max_right_angle>
	max_left_angle  = eeprom_read_word (  (uint16 *) LEFT_ADDR );
 970:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <LEFT_ADDR>
 974:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <LEFT_ADDR+0x1>
 978:	0e 94 3c 06 	call	0xc78	; 0xc78 <eeprom_read_word>
 97c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <max_left_angle+0x1>
 980:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <max_left_angle>
	Middle_Position = eeprom_read_word (  (uint16 *) MIDDLE_ADDR );
 984:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MIDDLE_ADDR>
 988:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <MIDDLE_ADDR+0x1>
 98c:	0e 94 3c 06 	call	0xc78	; 0xc78 <eeprom_read_word>
 990:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <Middle_Position+0x1>
 994:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <Middle_Position>
 998:	08 95       	ret

0000099a <__divsf3>:
 99a:	0e 94 e1 04 	call	0x9c2	; 0x9c2 <__divsf3x>
 99e:	0c 94 c2 05 	jmp	0xb84	; 0xb84 <__fp_round>
 9a2:	0e 94 bb 05 	call	0xb76	; 0xb76 <__fp_pscB>
 9a6:	58 f0       	brcs	.+22     	; 0x9be <__divsf3+0x24>
 9a8:	0e 94 b4 05 	call	0xb68	; 0xb68 <__fp_pscA>
 9ac:	40 f0       	brcs	.+16     	; 0x9be <__divsf3+0x24>
 9ae:	29 f4       	brne	.+10     	; 0x9ba <__divsf3+0x20>
 9b0:	5f 3f       	cpi	r21, 0xFF	; 255
 9b2:	29 f0       	breq	.+10     	; 0x9be <__divsf3+0x24>
 9b4:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_inf>
 9b8:	51 11       	cpse	r21, r1
 9ba:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_szero>
 9be:	0c 94 b1 05 	jmp	0xb62	; 0xb62 <__fp_nan>

000009c2 <__divsf3x>:
 9c2:	0e 94 d3 05 	call	0xba6	; 0xba6 <__fp_split3>
 9c6:	68 f3       	brcs	.-38     	; 0x9a2 <__divsf3+0x8>

000009c8 <__divsf3_pse>:
 9c8:	99 23       	and	r25, r25
 9ca:	b1 f3       	breq	.-20     	; 0x9b8 <__divsf3+0x1e>
 9cc:	55 23       	and	r21, r21
 9ce:	91 f3       	breq	.-28     	; 0x9b4 <__divsf3+0x1a>
 9d0:	95 1b       	sub	r25, r21
 9d2:	55 0b       	sbc	r21, r21
 9d4:	bb 27       	eor	r27, r27
 9d6:	aa 27       	eor	r26, r26
 9d8:	62 17       	cp	r22, r18
 9da:	73 07       	cpc	r23, r19
 9dc:	84 07       	cpc	r24, r20
 9de:	38 f0       	brcs	.+14     	; 0x9ee <__divsf3_pse+0x26>
 9e0:	9f 5f       	subi	r25, 0xFF	; 255
 9e2:	5f 4f       	sbci	r21, 0xFF	; 255
 9e4:	22 0f       	add	r18, r18
 9e6:	33 1f       	adc	r19, r19
 9e8:	44 1f       	adc	r20, r20
 9ea:	aa 1f       	adc	r26, r26
 9ec:	a9 f3       	breq	.-22     	; 0x9d8 <__divsf3_pse+0x10>
 9ee:	35 d0       	rcall	.+106    	; 0xa5a <__divsf3_pse+0x92>
 9f0:	0e 2e       	mov	r0, r30
 9f2:	3a f0       	brmi	.+14     	; 0xa02 <__divsf3_pse+0x3a>
 9f4:	e0 e8       	ldi	r30, 0x80	; 128
 9f6:	32 d0       	rcall	.+100    	; 0xa5c <__divsf3_pse+0x94>
 9f8:	91 50       	subi	r25, 0x01	; 1
 9fa:	50 40       	sbci	r21, 0x00	; 0
 9fc:	e6 95       	lsr	r30
 9fe:	00 1c       	adc	r0, r0
 a00:	ca f7       	brpl	.-14     	; 0x9f4 <__divsf3_pse+0x2c>
 a02:	2b d0       	rcall	.+86     	; 0xa5a <__divsf3_pse+0x92>
 a04:	fe 2f       	mov	r31, r30
 a06:	29 d0       	rcall	.+82     	; 0xa5a <__divsf3_pse+0x92>
 a08:	66 0f       	add	r22, r22
 a0a:	77 1f       	adc	r23, r23
 a0c:	88 1f       	adc	r24, r24
 a0e:	bb 1f       	adc	r27, r27
 a10:	26 17       	cp	r18, r22
 a12:	37 07       	cpc	r19, r23
 a14:	48 07       	cpc	r20, r24
 a16:	ab 07       	cpc	r26, r27
 a18:	b0 e8       	ldi	r27, 0x80	; 128
 a1a:	09 f0       	breq	.+2      	; 0xa1e <__divsf3_pse+0x56>
 a1c:	bb 0b       	sbc	r27, r27
 a1e:	80 2d       	mov	r24, r0
 a20:	bf 01       	movw	r22, r30
 a22:	ff 27       	eor	r31, r31
 a24:	93 58       	subi	r25, 0x83	; 131
 a26:	5f 4f       	sbci	r21, 0xFF	; 255
 a28:	3a f0       	brmi	.+14     	; 0xa38 <__divsf3_pse+0x70>
 a2a:	9e 3f       	cpi	r25, 0xFE	; 254
 a2c:	51 05       	cpc	r21, r1
 a2e:	78 f0       	brcs	.+30     	; 0xa4e <__divsf3_pse+0x86>
 a30:	0c 94 ab 05 	jmp	0xb56	; 0xb56 <__fp_inf>
 a34:	0c 94 f6 05 	jmp	0xbec	; 0xbec <__fp_szero>
 a38:	5f 3f       	cpi	r21, 0xFF	; 255
 a3a:	e4 f3       	brlt	.-8      	; 0xa34 <__divsf3_pse+0x6c>
 a3c:	98 3e       	cpi	r25, 0xE8	; 232
 a3e:	d4 f3       	brlt	.-12     	; 0xa34 <__divsf3_pse+0x6c>
 a40:	86 95       	lsr	r24
 a42:	77 95       	ror	r23
 a44:	67 95       	ror	r22
 a46:	b7 95       	ror	r27
 a48:	f7 95       	ror	r31
 a4a:	9f 5f       	subi	r25, 0xFF	; 255
 a4c:	c9 f7       	brne	.-14     	; 0xa40 <__divsf3_pse+0x78>
 a4e:	88 0f       	add	r24, r24
 a50:	91 1d       	adc	r25, r1
 a52:	96 95       	lsr	r25
 a54:	87 95       	ror	r24
 a56:	97 f9       	bld	r25, 7
 a58:	08 95       	ret
 a5a:	e1 e0       	ldi	r30, 0x01	; 1
 a5c:	66 0f       	add	r22, r22
 a5e:	77 1f       	adc	r23, r23
 a60:	88 1f       	adc	r24, r24
 a62:	bb 1f       	adc	r27, r27
 a64:	62 17       	cp	r22, r18
 a66:	73 07       	cpc	r23, r19
 a68:	84 07       	cpc	r24, r20
 a6a:	ba 07       	cpc	r27, r26
 a6c:	20 f0       	brcs	.+8      	; 0xa76 <__divsf3_pse+0xae>
 a6e:	62 1b       	sub	r22, r18
 a70:	73 0b       	sbc	r23, r19
 a72:	84 0b       	sbc	r24, r20
 a74:	ba 0b       	sbc	r27, r26
 a76:	ee 1f       	adc	r30, r30
 a78:	88 f7       	brcc	.-30     	; 0xa5c <__divsf3_pse+0x94>
 a7a:	e0 95       	com	r30
 a7c:	08 95       	ret

00000a7e <__fixunssfsi>:
 a7e:	0e 94 db 05 	call	0xbb6	; 0xbb6 <__fp_splitA>
 a82:	88 f0       	brcs	.+34     	; 0xaa6 <__fixunssfsi+0x28>
 a84:	9f 57       	subi	r25, 0x7F	; 127
 a86:	98 f0       	brcs	.+38     	; 0xaae <__fixunssfsi+0x30>
 a88:	b9 2f       	mov	r27, r25
 a8a:	99 27       	eor	r25, r25
 a8c:	b7 51       	subi	r27, 0x17	; 23
 a8e:	b0 f0       	brcs	.+44     	; 0xabc <__fixunssfsi+0x3e>
 a90:	e1 f0       	breq	.+56     	; 0xaca <__fixunssfsi+0x4c>
 a92:	66 0f       	add	r22, r22
 a94:	77 1f       	adc	r23, r23
 a96:	88 1f       	adc	r24, r24
 a98:	99 1f       	adc	r25, r25
 a9a:	1a f0       	brmi	.+6      	; 0xaa2 <__fixunssfsi+0x24>
 a9c:	ba 95       	dec	r27
 a9e:	c9 f7       	brne	.-14     	; 0xa92 <__fixunssfsi+0x14>
 aa0:	14 c0       	rjmp	.+40     	; 0xaca <__fixunssfsi+0x4c>
 aa2:	b1 30       	cpi	r27, 0x01	; 1
 aa4:	91 f0       	breq	.+36     	; 0xaca <__fixunssfsi+0x4c>
 aa6:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_zero>
 aaa:	b1 e0       	ldi	r27, 0x01	; 1
 aac:	08 95       	ret
 aae:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_zero>
 ab2:	67 2f       	mov	r22, r23
 ab4:	78 2f       	mov	r23, r24
 ab6:	88 27       	eor	r24, r24
 ab8:	b8 5f       	subi	r27, 0xF8	; 248
 aba:	39 f0       	breq	.+14     	; 0xaca <__fixunssfsi+0x4c>
 abc:	b9 3f       	cpi	r27, 0xF9	; 249
 abe:	cc f3       	brlt	.-14     	; 0xab2 <__fixunssfsi+0x34>
 ac0:	86 95       	lsr	r24
 ac2:	77 95       	ror	r23
 ac4:	67 95       	ror	r22
 ac6:	b3 95       	inc	r27
 ac8:	d9 f7       	brne	.-10     	; 0xac0 <__fixunssfsi+0x42>
 aca:	3e f4       	brtc	.+14     	; 0xada <__fixunssfsi+0x5c>
 acc:	90 95       	com	r25
 ace:	80 95       	com	r24
 ad0:	70 95       	com	r23
 ad2:	61 95       	neg	r22
 ad4:	7f 4f       	sbci	r23, 0xFF	; 255
 ad6:	8f 4f       	sbci	r24, 0xFF	; 255
 ad8:	9f 4f       	sbci	r25, 0xFF	; 255
 ada:	08 95       	ret

00000adc <__floatunsisf>:
 adc:	e8 94       	clt
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__floatsisf+0x12>

00000ae0 <__floatsisf>:
 ae0:	97 fb       	bst	r25, 7
 ae2:	3e f4       	brtc	.+14     	; 0xaf2 <__floatsisf+0x12>
 ae4:	90 95       	com	r25
 ae6:	80 95       	com	r24
 ae8:	70 95       	com	r23
 aea:	61 95       	neg	r22
 aec:	7f 4f       	sbci	r23, 0xFF	; 255
 aee:	8f 4f       	sbci	r24, 0xFF	; 255
 af0:	9f 4f       	sbci	r25, 0xFF	; 255
 af2:	99 23       	and	r25, r25
 af4:	a9 f0       	breq	.+42     	; 0xb20 <__floatsisf+0x40>
 af6:	f9 2f       	mov	r31, r25
 af8:	96 e9       	ldi	r25, 0x96	; 150
 afa:	bb 27       	eor	r27, r27
 afc:	93 95       	inc	r25
 afe:	f6 95       	lsr	r31
 b00:	87 95       	ror	r24
 b02:	77 95       	ror	r23
 b04:	67 95       	ror	r22
 b06:	b7 95       	ror	r27
 b08:	f1 11       	cpse	r31, r1
 b0a:	f8 cf       	rjmp	.-16     	; 0xafc <__floatsisf+0x1c>
 b0c:	fa f4       	brpl	.+62     	; 0xb4c <__floatsisf+0x6c>
 b0e:	bb 0f       	add	r27, r27
 b10:	11 f4       	brne	.+4      	; 0xb16 <__floatsisf+0x36>
 b12:	60 ff       	sbrs	r22, 0
 b14:	1b c0       	rjmp	.+54     	; 0xb4c <__floatsisf+0x6c>
 b16:	6f 5f       	subi	r22, 0xFF	; 255
 b18:	7f 4f       	sbci	r23, 0xFF	; 255
 b1a:	8f 4f       	sbci	r24, 0xFF	; 255
 b1c:	9f 4f       	sbci	r25, 0xFF	; 255
 b1e:	16 c0       	rjmp	.+44     	; 0xb4c <__floatsisf+0x6c>
 b20:	88 23       	and	r24, r24
 b22:	11 f0       	breq	.+4      	; 0xb28 <__floatsisf+0x48>
 b24:	96 e9       	ldi	r25, 0x96	; 150
 b26:	11 c0       	rjmp	.+34     	; 0xb4a <__floatsisf+0x6a>
 b28:	77 23       	and	r23, r23
 b2a:	21 f0       	breq	.+8      	; 0xb34 <__floatsisf+0x54>
 b2c:	9e e8       	ldi	r25, 0x8E	; 142
 b2e:	87 2f       	mov	r24, r23
 b30:	76 2f       	mov	r23, r22
 b32:	05 c0       	rjmp	.+10     	; 0xb3e <__floatsisf+0x5e>
 b34:	66 23       	and	r22, r22
 b36:	71 f0       	breq	.+28     	; 0xb54 <__floatsisf+0x74>
 b38:	96 e8       	ldi	r25, 0x86	; 134
 b3a:	86 2f       	mov	r24, r22
 b3c:	70 e0       	ldi	r23, 0x00	; 0
 b3e:	60 e0       	ldi	r22, 0x00	; 0
 b40:	2a f0       	brmi	.+10     	; 0xb4c <__floatsisf+0x6c>
 b42:	9a 95       	dec	r25
 b44:	66 0f       	add	r22, r22
 b46:	77 1f       	adc	r23, r23
 b48:	88 1f       	adc	r24, r24
 b4a:	da f7       	brpl	.-10     	; 0xb42 <__floatsisf+0x62>
 b4c:	88 0f       	add	r24, r24
 b4e:	96 95       	lsr	r25
 b50:	87 95       	ror	r24
 b52:	97 f9       	bld	r25, 7
 b54:	08 95       	ret

00000b56 <__fp_inf>:
 b56:	97 f9       	bld	r25, 7
 b58:	9f 67       	ori	r25, 0x7F	; 127
 b5a:	80 e8       	ldi	r24, 0x80	; 128
 b5c:	70 e0       	ldi	r23, 0x00	; 0
 b5e:	60 e0       	ldi	r22, 0x00	; 0
 b60:	08 95       	ret

00000b62 <__fp_nan>:
 b62:	9f ef       	ldi	r25, 0xFF	; 255
 b64:	80 ec       	ldi	r24, 0xC0	; 192
 b66:	08 95       	ret

00000b68 <__fp_pscA>:
 b68:	00 24       	eor	r0, r0
 b6a:	0a 94       	dec	r0
 b6c:	16 16       	cp	r1, r22
 b6e:	17 06       	cpc	r1, r23
 b70:	18 06       	cpc	r1, r24
 b72:	09 06       	cpc	r0, r25
 b74:	08 95       	ret

00000b76 <__fp_pscB>:
 b76:	00 24       	eor	r0, r0
 b78:	0a 94       	dec	r0
 b7a:	12 16       	cp	r1, r18
 b7c:	13 06       	cpc	r1, r19
 b7e:	14 06       	cpc	r1, r20
 b80:	05 06       	cpc	r0, r21
 b82:	08 95       	ret

00000b84 <__fp_round>:
 b84:	09 2e       	mov	r0, r25
 b86:	03 94       	inc	r0
 b88:	00 0c       	add	r0, r0
 b8a:	11 f4       	brne	.+4      	; 0xb90 <__fp_round+0xc>
 b8c:	88 23       	and	r24, r24
 b8e:	52 f0       	brmi	.+20     	; 0xba4 <__fp_round+0x20>
 b90:	bb 0f       	add	r27, r27
 b92:	40 f4       	brcc	.+16     	; 0xba4 <__fp_round+0x20>
 b94:	bf 2b       	or	r27, r31
 b96:	11 f4       	brne	.+4      	; 0xb9c <__fp_round+0x18>
 b98:	60 ff       	sbrs	r22, 0
 b9a:	04 c0       	rjmp	.+8      	; 0xba4 <__fp_round+0x20>
 b9c:	6f 5f       	subi	r22, 0xFF	; 255
 b9e:	7f 4f       	sbci	r23, 0xFF	; 255
 ba0:	8f 4f       	sbci	r24, 0xFF	; 255
 ba2:	9f 4f       	sbci	r25, 0xFF	; 255
 ba4:	08 95       	ret

00000ba6 <__fp_split3>:
 ba6:	57 fd       	sbrc	r21, 7
 ba8:	90 58       	subi	r25, 0x80	; 128
 baa:	44 0f       	add	r20, r20
 bac:	55 1f       	adc	r21, r21
 bae:	59 f0       	breq	.+22     	; 0xbc6 <__fp_splitA+0x10>
 bb0:	5f 3f       	cpi	r21, 0xFF	; 255
 bb2:	71 f0       	breq	.+28     	; 0xbd0 <__fp_splitA+0x1a>
 bb4:	47 95       	ror	r20

00000bb6 <__fp_splitA>:
 bb6:	88 0f       	add	r24, r24
 bb8:	97 fb       	bst	r25, 7
 bba:	99 1f       	adc	r25, r25
 bbc:	61 f0       	breq	.+24     	; 0xbd6 <__fp_splitA+0x20>
 bbe:	9f 3f       	cpi	r25, 0xFF	; 255
 bc0:	79 f0       	breq	.+30     	; 0xbe0 <__fp_splitA+0x2a>
 bc2:	87 95       	ror	r24
 bc4:	08 95       	ret
 bc6:	12 16       	cp	r1, r18
 bc8:	13 06       	cpc	r1, r19
 bca:	14 06       	cpc	r1, r20
 bcc:	55 1f       	adc	r21, r21
 bce:	f2 cf       	rjmp	.-28     	; 0xbb4 <__fp_split3+0xe>
 bd0:	46 95       	lsr	r20
 bd2:	f1 df       	rcall	.-30     	; 0xbb6 <__fp_splitA>
 bd4:	08 c0       	rjmp	.+16     	; 0xbe6 <__fp_splitA+0x30>
 bd6:	16 16       	cp	r1, r22
 bd8:	17 06       	cpc	r1, r23
 bda:	18 06       	cpc	r1, r24
 bdc:	99 1f       	adc	r25, r25
 bde:	f1 cf       	rjmp	.-30     	; 0xbc2 <__fp_splitA+0xc>
 be0:	86 95       	lsr	r24
 be2:	71 05       	cpc	r23, r1
 be4:	61 05       	cpc	r22, r1
 be6:	08 94       	sec
 be8:	08 95       	ret

00000bea <__fp_zero>:
 bea:	e8 94       	clt

00000bec <__fp_szero>:
 bec:	bb 27       	eor	r27, r27
 bee:	66 27       	eor	r22, r22
 bf0:	77 27       	eor	r23, r23
 bf2:	cb 01       	movw	r24, r22
 bf4:	97 f9       	bld	r25, 7
 bf6:	08 95       	ret

00000bf8 <itoa>:
 bf8:	45 32       	cpi	r20, 0x25	; 37
 bfa:	51 05       	cpc	r21, r1
 bfc:	20 f4       	brcc	.+8      	; 0xc06 <itoa+0xe>
 bfe:	42 30       	cpi	r20, 0x02	; 2
 c00:	10 f0       	brcs	.+4      	; 0xc06 <itoa+0xe>
 c02:	0c 94 07 06 	jmp	0xc0e	; 0xc0e <__itoa_ncheck>
 c06:	fb 01       	movw	r30, r22
 c08:	10 82       	st	Z, r1
 c0a:	cb 01       	movw	r24, r22
 c0c:	08 95       	ret

00000c0e <__itoa_ncheck>:
 c0e:	bb 27       	eor	r27, r27
 c10:	4a 30       	cpi	r20, 0x0A	; 10
 c12:	31 f4       	brne	.+12     	; 0xc20 <__itoa_ncheck+0x12>
 c14:	99 23       	and	r25, r25
 c16:	22 f4       	brpl	.+8      	; 0xc20 <__itoa_ncheck+0x12>
 c18:	bd e2       	ldi	r27, 0x2D	; 45
 c1a:	90 95       	com	r25
 c1c:	81 95       	neg	r24
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	0c 94 13 06 	jmp	0xc26	; 0xc26 <__utoa_common>

00000c24 <__utoa_ncheck>:
 c24:	bb 27       	eor	r27, r27

00000c26 <__utoa_common>:
 c26:	fb 01       	movw	r30, r22
 c28:	55 27       	eor	r21, r21
 c2a:	aa 27       	eor	r26, r26
 c2c:	88 0f       	add	r24, r24
 c2e:	99 1f       	adc	r25, r25
 c30:	aa 1f       	adc	r26, r26
 c32:	a4 17       	cp	r26, r20
 c34:	10 f0       	brcs	.+4      	; 0xc3a <__utoa_common+0x14>
 c36:	a4 1b       	sub	r26, r20
 c38:	83 95       	inc	r24
 c3a:	50 51       	subi	r21, 0x10	; 16
 c3c:	b9 f7       	brne	.-18     	; 0xc2c <__utoa_common+0x6>
 c3e:	a0 5d       	subi	r26, 0xD0	; 208
 c40:	aa 33       	cpi	r26, 0x3A	; 58
 c42:	08 f0       	brcs	.+2      	; 0xc46 <__utoa_common+0x20>
 c44:	a9 5d       	subi	r26, 0xD9	; 217
 c46:	a1 93       	st	Z+, r26
 c48:	00 97       	sbiw	r24, 0x00	; 0
 c4a:	79 f7       	brne	.-34     	; 0xc2a <__utoa_common+0x4>
 c4c:	b1 11       	cpse	r27, r1
 c4e:	b1 93       	st	Z+, r27
 c50:	11 92       	st	Z+, r1
 c52:	cb 01       	movw	r24, r22
 c54:	0c 94 2c 06 	jmp	0xc58	; 0xc58 <strrev>

00000c58 <strrev>:
 c58:	dc 01       	movw	r26, r24
 c5a:	fc 01       	movw	r30, r24
 c5c:	67 2f       	mov	r22, r23
 c5e:	71 91       	ld	r23, Z+
 c60:	77 23       	and	r23, r23
 c62:	e1 f7       	brne	.-8      	; 0xc5c <strrev+0x4>
 c64:	32 97       	sbiw	r30, 0x02	; 2
 c66:	04 c0       	rjmp	.+8      	; 0xc70 <strrev+0x18>
 c68:	7c 91       	ld	r23, X
 c6a:	6d 93       	st	X+, r22
 c6c:	70 83       	st	Z, r23
 c6e:	62 91       	ld	r22, -Z
 c70:	ae 17       	cp	r26, r30
 c72:	bf 07       	cpc	r27, r31
 c74:	c8 f3       	brcs	.-14     	; 0xc68 <strrev+0x10>
 c76:	08 95       	ret

00000c78 <eeprom_read_word>:
 c78:	a8 e1       	ldi	r26, 0x18	; 24
 c7a:	b0 e0       	ldi	r27, 0x00	; 0
 c7c:	42 e0       	ldi	r20, 0x02	; 2
 c7e:	50 e0       	ldi	r21, 0x00	; 0
 c80:	0c 94 4a 06 	jmp	0xc94	; 0xc94 <eeprom_read_blraw>

00000c84 <eeprom_update_word>:
 c84:	01 96       	adiw	r24, 0x01	; 1
 c86:	27 2f       	mov	r18, r23
 c88:	0e 94 59 06 	call	0xcb2	; 0xcb2 <eeprom_update_r18>
 c8c:	0c 94 58 06 	jmp	0xcb0	; 0xcb0 <eeprom_update_byte>

00000c90 <eeprom_read_block>:
 c90:	dc 01       	movw	r26, r24
 c92:	cb 01       	movw	r24, r22

00000c94 <eeprom_read_blraw>:
 c94:	fc 01       	movw	r30, r24
 c96:	f9 99       	sbic	0x1f, 1	; 31
 c98:	fe cf       	rjmp	.-4      	; 0xc96 <eeprom_read_blraw+0x2>
 c9a:	06 c0       	rjmp	.+12     	; 0xca8 <eeprom_read_blraw+0x14>
 c9c:	f2 bd       	out	0x22, r31	; 34
 c9e:	e1 bd       	out	0x21, r30	; 33
 ca0:	f8 9a       	sbi	0x1f, 0	; 31
 ca2:	31 96       	adiw	r30, 0x01	; 1
 ca4:	00 b4       	in	r0, 0x20	; 32
 ca6:	0d 92       	st	X+, r0
 ca8:	41 50       	subi	r20, 0x01	; 1
 caa:	50 40       	sbci	r21, 0x00	; 0
 cac:	b8 f7       	brcc	.-18     	; 0xc9c <eeprom_read_blraw+0x8>
 cae:	08 95       	ret

00000cb0 <eeprom_update_byte>:
 cb0:	26 2f       	mov	r18, r22

00000cb2 <eeprom_update_r18>:
 cb2:	f9 99       	sbic	0x1f, 1	; 31
 cb4:	fe cf       	rjmp	.-4      	; 0xcb2 <eeprom_update_r18>
 cb6:	92 bd       	out	0x22, r25	; 34
 cb8:	81 bd       	out	0x21, r24	; 33
 cba:	f8 9a       	sbi	0x1f, 0	; 31
 cbc:	01 97       	sbiw	r24, 0x01	; 1
 cbe:	00 b4       	in	r0, 0x20	; 32
 cc0:	02 16       	cp	r0, r18
 cc2:	39 f0       	breq	.+14     	; 0xcd2 <eeprom_update_r18+0x20>
 cc4:	1f ba       	out	0x1f, r1	; 31
 cc6:	20 bd       	out	0x20, r18	; 32
 cc8:	0f b6       	in	r0, 0x3f	; 63
 cca:	f8 94       	cli
 ccc:	fa 9a       	sbi	0x1f, 2	; 31
 cce:	f9 9a       	sbi	0x1f, 1	; 31
 cd0:	0f be       	out	0x3f, r0	; 63
 cd2:	08 95       	ret

00000cd4 <_exit>:
 cd4:	f8 94       	cli

00000cd6 <__stop_program>:
 cd6:	ff cf       	rjmp	.-2      	; 0xcd6 <__stop_program>
