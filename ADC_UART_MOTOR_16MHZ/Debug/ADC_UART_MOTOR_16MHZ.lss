
ADC_UART_MOTOR_16MHZ.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000003c  00800100  00000cd6  00000d6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000cd6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000010  0080013c  0080013c  00000da6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000da6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000dd8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000002a8  00000000  00000000  00000e18  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002b18  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001038  00000000  00000000  00003bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000165c  00000000  00000000  00004c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004ac  00000000  00000000  0000626c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a09  00000000  00000000  00006718  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001094  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000200  00000000  00000000  000081b5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 9d 02 	jmp	0x53a	; 0x53a <__vector_11>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 ed       	ldi	r30, 0xD6	; 214
  7c:	fc e0       	ldi	r31, 0x0C	; 12
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ac 33       	cpi	r26, 0x3C	; 60
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	ac e3       	ldi	r26, 0x3C	; 60
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 2a 02 	call	0x454	; 0x454 <main>
  9e:	0c 94 69 06 	jmp	0xcd2	; 0xcd2 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ADC_Init>:


void ADC_Init(){
	

	SET_BIT(ADMUX , 6); // Connecting AREFF to AVCC 5V
  a6:	ec e7       	ldi	r30, 0x7C	; 124
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	80 81       	ld	r24, Z
  ac:	80 64       	ori	r24, 0x40	; 64
  ae:	80 83       	st	Z, r24
		
	#endif
	*/
	
	// Setting Prescaler to 128
	SET_BIT(ADCSRA , 0);
  b0:	ea e7       	ldi	r30, 0x7A	; 122
  b2:	f0 e0       	ldi	r31, 0x00	; 0
  b4:	80 81       	ld	r24, Z
  b6:	81 60       	ori	r24, 0x01	; 1
  b8:	80 83       	st	Z, r24
	SET_BIT(ADCSRA , 1);
  ba:	80 81       	ld	r24, Z
  bc:	82 60       	ori	r24, 0x02	; 2
  be:	80 83       	st	Z, r24
	SET_BIT(ADCSRA , 2);
  c0:	80 81       	ld	r24, Z
  c2:	84 60       	ori	r24, 0x04	; 4
  c4:	80 83       	st	Z, r24

	/////////////////////////////////////////////////////////////////////////	
	
	SET_BIT(ADCSRA , 7);  //-->Enable ADC
  c6:	80 81       	ld	r24, Z
  c8:	80 68       	ori	r24, 0x80	; 128
  ca:	80 83       	st	Z, r24
	
	SET_BIT(ADCSRA , 6);  //-->Pre-Conversion
  cc:	80 81       	ld	r24, Z
  ce:	80 64       	ori	r24, 0x40	; 64
  d0:	80 83       	st	Z, r24
  d2:	08 95       	ret

000000d4 <Read_ADC>:
}
uint16 Read_ADC(uint8 channel)
{

	//Select ADC Channel with SAFTEY MASK
	ADMUX &= 0xF0;
  d4:	ec e7       	ldi	r30, 0x7C	; 124
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	90 81       	ld	r25, Z
  da:	90 7f       	andi	r25, 0xF0	; 240
  dc:	90 83       	st	Z, r25
	
	//Channel Selection
	ADMUX |= channel;
  de:	90 81       	ld	r25, Z
  e0:	89 2b       	or	r24, r25
  e2:	80 83       	st	Z, r24
	
	SET_BIT(ADCSRA , 6);  //-->Start_Conversion
  e4:	ea e7       	ldi	r30, 0x7A	; 122
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	80 64       	ori	r24, 0x40	; 64
  ec:	80 83       	st	Z, r24
	
	while(GET_BIT(ADCSRA , 6));
  ee:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7f807a>
  f2:	86 fd       	sbrc	r24, 6
  f4:	fc cf       	rjmp	.-8      	; 0xee <Read_ADC+0x1a>
	//while(ADCSRA & (1<<ADSC));
	return ADC;
  f6:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f8078>
  fa:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7f8079>

	
	
	
	
}
  fe:	08 95       	ret

00000100 <DCMotor_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 100:	41 e0       	ldi	r20, 0x01	; 1
 102:	65 e0       	ldi	r22, 0x05	; 5
 104:	83 e0       	ldi	r24, 0x03	; 3
 106:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	66 e0       	ldi	r22, 0x06	; 6
 10e:	83 e0       	ldi	r24, 0x03	; 3
 110:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 114:	41 e0       	ldi	r20, 0x01	; 1
 116:	67 e0       	ldi	r22, 0x07	; 7
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 11e:	08 95       	ret

00000120 <DCMotor_SetDir>:
 120:	81 30       	cpi	r24, 0x01	; 1
 122:	b1 f0       	breq	.+44     	; 0x150 <DCMotor_SetDir+0x30>
 124:	18 f0       	brcs	.+6      	; 0x12c <DCMotor_SetDir+0xc>
 126:	82 30       	cpi	r24, 0x02	; 2
 128:	31 f1       	breq	.+76     	; 0x176 <DCMotor_SetDir+0x56>
 12a:	08 95       	ret
 12c:	40 e0       	ldi	r20, 0x00	; 0
 12e:	65 e0       	ldi	r22, 0x05	; 5
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 136:	41 e0       	ldi	r20, 0x01	; 1
 138:	66 e0       	ldi	r22, 0x06	; 6
 13a:	83 e0       	ldi	r24, 0x03	; 3
 13c:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 140:	41 e0       	ldi	r20, 0x01	; 1
 142:	67 e0       	ldi	r22, 0x07	; 7
 144:	83 e0       	ldi	r24, 0x03	; 3
 146:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 14a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 14e:	08 95       	ret
 150:	41 e0       	ldi	r20, 0x01	; 1
 152:	65 e0       	ldi	r22, 0x05	; 5
 154:	83 e0       	ldi	r24, 0x03	; 3
 156:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 15a:	40 e0       	ldi	r20, 0x00	; 0
 15c:	66 e0       	ldi	r22, 0x06	; 6
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 164:	41 e0       	ldi	r20, 0x01	; 1
 166:	67 e0       	ldi	r22, 0x07	; 7
 168:	83 e0       	ldi	r24, 0x03	; 3
 16a:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 16e:	81 e0       	ldi	r24, 0x01	; 1
 170:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 174:	08 95       	ret
 176:	60 e0       	ldi	r22, 0x00	; 0
 178:	83 e0       	ldi	r24, 0x03	; 3
 17a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 17e:	08 95       	ret

00000180 <DCMotor_SetSpeed>:
 180:	90 e0       	ldi	r25, 0x00	; 0
 182:	90 93 46 01 	sts	0x0146, r25	; 0x800146 <EINGELERNET>
 186:	80 93 45 01 	sts	0x0145, r24	; 0x800145 <GLOBAL_SPEED>
 18a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 18e:	88 23       	and	r24, r24
 190:	19 f0       	breq	.+6      	; 0x198 <DCMotor_SetSpeed+0x18>
 192:	81 30       	cpi	r24, 0x01	; 1
 194:	39 f0       	breq	.+14     	; 0x1a4 <DCMotor_SetSpeed+0x24>
 196:	08 95       	ret
 198:	41 e0       	ldi	r20, 0x01	; 1
 19a:	66 e0       	ldi	r22, 0x06	; 6
 19c:	83 e0       	ldi	r24, 0x03	; 3
 19e:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 1a2:	08 95       	ret
 1a4:	41 e0       	ldi	r20, 0x01	; 1
 1a6:	65 e0       	ldi	r22, 0x05	; 5
 1a8:	83 e0       	ldi	r24, 0x03	; 3
 1aa:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 1ae:	08 95       	ret

000001b0 <DCMotor_Stop>:
 1b0:	6f ef       	ldi	r22, 0xFF	; 255
 1b2:	83 e0       	ldi	r24, 0x03	; 3
 1b4:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 1b8:	2f e9       	ldi	r18, 0x9F	; 159
 1ba:	86 e8       	ldi	r24, 0x86	; 134
 1bc:	91 e0       	ldi	r25, 0x01	; 1
 1be:	21 50       	subi	r18, 0x01	; 1
 1c0:	80 40       	sbci	r24, 0x00	; 0
 1c2:	90 40       	sbci	r25, 0x00	; 0
 1c4:	e1 f7       	brne	.-8      	; 0x1be <DCMotor_Stop+0xe>
 1c6:	00 c0       	rjmp	.+0      	; 0x1c8 <DCMotor_Stop+0x18>
 1c8:	00 00       	nop
 1ca:	60 e0       	ldi	r22, 0x00	; 0
 1cc:	83 e0       	ldi	r24, 0x03	; 3
 1ce:	0e 94 72 01 	call	0x2e4	; 0x2e4 <DIO_SetPortValue>
 1d2:	82 e0       	ldi	r24, 0x02	; 2
 1d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d8:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <EINGELERNET>
 1dc:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <GLOBAL_SPEED>
 1e0:	08 95       	ret

000001e2 <DC_Motor_Dir_Calc>:

DC_MOTOR_DIR DC_Motor_Dir_Calc(uint16 Desired_position , uint16 Sitting_Position )
{
	int Route = 0;
	
	if (Desired_position > Sitting_Position)
 1e2:	68 17       	cp	r22, r24
 1e4:	79 07       	cpc	r23, r25
 1e6:	60 f4       	brcc	.+24     	; 0x200 <DC_Motor_Dir_Calc+0x1e>
	{
		Route = Desired_position - Sitting_Position;
 1e8:	9c 01       	movw	r18, r24
 1ea:	26 1b       	sub	r18, r22
 1ec:	37 0b       	sbc	r19, r23

		if (Route > circle/2)
 1ee:	25 3b       	cpi	r18, 0xB5	; 181
 1f0:	31 05       	cpc	r19, r1
 1f2:	a8 f4       	brcc	.+42     	; 0x21e <DC_Motor_Dir_Calc+0x3c>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
		else if (Route < circle/2)
 1f4:	24 3b       	cpi	r18, 0xB4	; 180
 1f6:	31 05       	cpc	r19, r1
 1f8:	a0 f0       	brcs	.+40     	; 0x222 <DC_Motor_Dir_Calc+0x40>
		{
			return CLOCK_WISE_DIR;
		}
		else if (Route == circle/2)
 1fa:	24 3b       	cpi	r18, 0xB4	; 180
 1fc:	31 05       	cpc	r19, r1
 1fe:	99 f0       	breq	.+38     	; 0x226 <DC_Motor_Dir_Calc+0x44>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
	}
	
	if (Desired_position < Sitting_Position)
 200:	86 17       	cp	r24, r22
 202:	97 07       	cpc	r25, r23
 204:	58 f4       	brcc	.+22     	; 0x21c <DC_Motor_Dir_Calc+0x3a>
	{
		Route = Sitting_Position - Desired_position;
 206:	68 1b       	sub	r22, r24
 208:	79 0b       	sbc	r23, r25
		
		if (Route > circle/2)
 20a:	65 3b       	cpi	r22, 0xB5	; 181
 20c:	71 05       	cpc	r23, r1
 20e:	68 f4       	brcc	.+26     	; 0x22a <DC_Motor_Dir_Calc+0x48>
		{
			return CLOCK_WISE_DIR;
		}
		else if (Route < circle/2)
 210:	64 3b       	cpi	r22, 0xB4	; 180
 212:	71 05       	cpc	r23, r1
 214:	60 f0       	brcs	.+24     	; 0x22e <DC_Motor_Dir_Calc+0x4c>
		{
			return ANTI_CLOCK_WISE_DIR;
		}
		else if (Route == circle/2)
 216:	64 3b       	cpi	r22, 0xB4	; 180
 218:	71 05       	cpc	r23, r1
 21a:	59 f0       	breq	.+22     	; 0x232 <DC_Motor_Dir_Calc+0x50>
		{
			return CLOCK_WISE_DIR;
		}
	}	
}
 21c:	08 95       	ret
	{
		Route = Desired_position - Sitting_Position;

		if (Route > circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 21e:	81 e0       	ldi	r24, 0x01	; 1
 220:	08 95       	ret
		}
		else if (Route < circle/2)
		{
			return CLOCK_WISE_DIR;
 222:	80 e0       	ldi	r24, 0x00	; 0
 224:	08 95       	ret
		}
		else if (Route == circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
	{
		Route = Sitting_Position - Desired_position;
		
		if (Route > circle/2)
		{
			return CLOCK_WISE_DIR;
 22a:	80 e0       	ldi	r24, 0x00	; 0
 22c:	08 95       	ret
		}
		else if (Route < circle/2)
		{
			return ANTI_CLOCK_WISE_DIR;
 22e:	81 e0       	ldi	r24, 0x01	; 1
 230:	08 95       	ret
		}
		else if (Route == circle/2)
		{
			return CLOCK_WISE_DIR;
 232:	80 e0       	ldi	r24, 0x00	; 0
		}
	}	
}
 234:	08 95       	ret

00000236 <DIO_SetPinDir>:
	


void DIO_SetPinDir(uint8 Port, uint8 Pin, uint8 Dir)
{
	switch (Dir)
 236:	44 23       	and	r20, r20
 238:	59 f1       	breq	.+86     	; 0x290 <DIO_SetPinDir+0x5a>
 23a:	41 30       	cpi	r20, 0x01	; 1
 23c:	09 f0       	breq	.+2      	; 0x240 <DIO_SetPinDir+0xa>
 23e:	51 c0       	rjmp	.+162    	; 0x2e2 <DIO_SetPinDir+0xac>
	{
		case DIO_PIN_OUTPUT :
		
			switch (Port)
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	81 f0       	breq	.+32     	; 0x264 <DIO_SetPinDir+0x2e>
 244:	83 30       	cpi	r24, 0x03	; 3
 246:	c9 f0       	breq	.+50     	; 0x27a <DIO_SetPinDir+0x44>
 248:	81 30       	cpi	r24, 0x01	; 1
 24a:	09 f0       	breq	.+2      	; 0x24e <DIO_SetPinDir+0x18>
 24c:	4a c0       	rjmp	.+148    	; 0x2e2 <DIO_SetPinDir+0xac>
			{		
									
				case DIO_PORTB :
				SET_BIT(DDRB,Pin);
 24e:	24 b1       	in	r18, 0x04	; 4
 250:	81 e0       	ldi	r24, 0x01	; 1
 252:	90 e0       	ldi	r25, 0x00	; 0
 254:	02 c0       	rjmp	.+4      	; 0x25a <DIO_SetPinDir+0x24>
 256:	88 0f       	add	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	6a 95       	dec	r22
 25c:	e2 f7       	brpl	.-8      	; 0x256 <DIO_SetPinDir+0x20>
 25e:	82 2b       	or	r24, r18
 260:	84 b9       	out	0x04, r24	; 4
				break;
 262:	08 95       	ret
				
				case DIO_PORTC :
				SET_BIT(DDRC,Pin);
 264:	27 b1       	in	r18, 0x07	; 7
 266:	81 e0       	ldi	r24, 0x01	; 1
 268:	90 e0       	ldi	r25, 0x00	; 0
 26a:	02 c0       	rjmp	.+4      	; 0x270 <DIO_SetPinDir+0x3a>
 26c:	88 0f       	add	r24, r24
 26e:	99 1f       	adc	r25, r25
 270:	6a 95       	dec	r22
 272:	e2 f7       	brpl	.-8      	; 0x26c <DIO_SetPinDir+0x36>
 274:	82 2b       	or	r24, r18
 276:	87 b9       	out	0x07, r24	; 7
				break;
 278:	08 95       	ret
				
				case DIO_PORTD :
				SET_BIT(DDRD,Pin);
 27a:	2a b1       	in	r18, 0x0a	; 10
 27c:	81 e0       	ldi	r24, 0x01	; 1
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	02 c0       	rjmp	.+4      	; 0x286 <DIO_SetPinDir+0x50>
 282:	88 0f       	add	r24, r24
 284:	99 1f       	adc	r25, r25
 286:	6a 95       	dec	r22
 288:	e2 f7       	brpl	.-8      	; 0x282 <DIO_SetPinDir+0x4c>
 28a:	82 2b       	or	r24, r18
 28c:	8a b9       	out	0x0a, r24	; 10
				break;
 28e:	08 95       	ret
			}
			break;
		
		case DIO_PIN_INPUT :
		
			switch (Port)
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	81 f0       	breq	.+32     	; 0x2b4 <DIO_SetPinDir+0x7e>
 294:	83 30       	cpi	r24, 0x03	; 3
 296:	d1 f0       	breq	.+52     	; 0x2cc <DIO_SetPinDir+0x96>
 298:	81 30       	cpi	r24, 0x01	; 1
 29a:	19 f5       	brne	.+70     	; 0x2e2 <DIO_SetPinDir+0xac>
			{

				case DIO_PORTB :
				CLR_BIT(DDRB,Pin);
 29c:	24 b1       	in	r18, 0x04	; 4
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	90 e0       	ldi	r25, 0x00	; 0
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <DIO_SetPinDir+0x72>
 2a4:	88 0f       	add	r24, r24
 2a6:	99 1f       	adc	r25, r25
 2a8:	6a 95       	dec	r22
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <DIO_SetPinDir+0x6e>
 2ac:	80 95       	com	r24
 2ae:	82 23       	and	r24, r18
 2b0:	84 b9       	out	0x04, r24	; 4
				break;
 2b2:	08 95       	ret
				
				case DIO_PORTC :
				CLR_BIT(DDRC,Pin);
 2b4:	27 b1       	in	r18, 0x07	; 7
 2b6:	81 e0       	ldi	r24, 0x01	; 1
 2b8:	90 e0       	ldi	r25, 0x00	; 0
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_SetPinDir+0x8a>
 2bc:	88 0f       	add	r24, r24
 2be:	99 1f       	adc	r25, r25
 2c0:	6a 95       	dec	r22
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_SetPinDir+0x86>
 2c4:	80 95       	com	r24
 2c6:	82 23       	and	r24, r18
 2c8:	87 b9       	out	0x07, r24	; 7
				break;
 2ca:	08 95       	ret
				
				case DIO_PORTD :
				CLR_BIT(DDRD,Pin);
 2cc:	2a b1       	in	r18, 0x0a	; 10
 2ce:	81 e0       	ldi	r24, 0x01	; 1
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_SetPinDir+0xa2>
 2d4:	88 0f       	add	r24, r24
 2d6:	99 1f       	adc	r25, r25
 2d8:	6a 95       	dec	r22
 2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_SetPinDir+0x9e>
 2dc:	80 95       	com	r24
 2de:	82 23       	and	r24, r18
 2e0:	8a b9       	out	0x0a, r24	; 10
 2e2:	08 95       	ret

000002e4 <DIO_SetPortValue>:
}


void DIO_SetPortValue(uint8 Port, uint8 Val)
{
	switch (Port)
 2e4:	82 30       	cpi	r24, 0x02	; 2
 2e6:	31 f0       	breq	.+12     	; 0x2f4 <DIO_SetPortValue+0x10>
 2e8:	83 30       	cpi	r24, 0x03	; 3
 2ea:	31 f0       	breq	.+12     	; 0x2f8 <DIO_SetPortValue+0x14>
 2ec:	81 30       	cpi	r24, 0x01	; 1
 2ee:	29 f4       	brne	.+10     	; 0x2fa <DIO_SetPortValue+0x16>
	{

			
		case DIO_PORTB :
		
		PORTB = Val ;
 2f0:	65 b9       	out	0x05, r22	; 5
		
		break ;
 2f2:	08 95       	ret
		
		case DIO_PORTC :
		
		PORTC = Val ;
 2f4:	68 b9       	out	0x08, r22	; 8
		
		break ;
 2f6:	08 95       	ret
		
		case DIO_PORTD :
		
		PORTD = Val ;
 2f8:	6b b9       	out	0x0b, r22	; 11
 2fa:	08 95       	ret

000002fc <DIO_SetPinValue>:
	}	
	
}
void DIO_SetPinValue(uint8 Port, uint8 Pin, uint8 Val)
{
	switch (Val)
 2fc:	44 23       	and	r20, r20
 2fe:	59 f1       	breq	.+86     	; 0x356 <DIO_SetPinValue+0x5a>
 300:	41 30       	cpi	r20, 0x01	; 1
 302:	09 f0       	breq	.+2      	; 0x306 <DIO_SetPinValue+0xa>
 304:	51 c0       	rjmp	.+162    	; 0x3a8 <DIO_SetPinValue+0xac>
	{
		case DIO_PIN_HIGH :
		switch (Port)
 306:	82 30       	cpi	r24, 0x02	; 2
 308:	81 f0       	breq	.+32     	; 0x32a <DIO_SetPinValue+0x2e>
 30a:	83 30       	cpi	r24, 0x03	; 3
 30c:	c9 f0       	breq	.+50     	; 0x340 <DIO_SetPinValue+0x44>
 30e:	81 30       	cpi	r24, 0x01	; 1
 310:	09 f0       	breq	.+2      	; 0x314 <DIO_SetPinValue+0x18>
 312:	4a c0       	rjmp	.+148    	; 0x3a8 <DIO_SetPinValue+0xac>
		{
				
			case DIO_PORTB :
			SET_BIT(PORTB,Pin);
 314:	25 b1       	in	r18, 0x05	; 5
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_SetPinValue+0x24>
 31c:	88 0f       	add	r24, r24
 31e:	99 1f       	adc	r25, r25
 320:	6a 95       	dec	r22
 322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_SetPinValue+0x20>
 324:	82 2b       	or	r24, r18
 326:	85 b9       	out	0x05, r24	; 5
			break;
 328:	08 95       	ret
			
			case DIO_PORTC :
			SET_BIT(PORTC,Pin);
 32a:	28 b1       	in	r18, 0x08	; 8
 32c:	81 e0       	ldi	r24, 0x01	; 1
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	02 c0       	rjmp	.+4      	; 0x336 <DIO_SetPinValue+0x3a>
 332:	88 0f       	add	r24, r24
 334:	99 1f       	adc	r25, r25
 336:	6a 95       	dec	r22
 338:	e2 f7       	brpl	.-8      	; 0x332 <DIO_SetPinValue+0x36>
 33a:	82 2b       	or	r24, r18
 33c:	88 b9       	out	0x08, r24	; 8
			break;
 33e:	08 95       	ret
			
			case DIO_PORTD :
			SET_BIT(PORTD,Pin);
 340:	2b b1       	in	r18, 0x0b	; 11
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_SetPinValue+0x50>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_SetPinValue+0x4c>
 350:	82 2b       	or	r24, r18
 352:	8b b9       	out	0x0b, r24	; 11
			break;
 354:	08 95       	ret
			break;
		}
		break;
		
		case DIO_PIN_LOW :
		switch (Port)
 356:	82 30       	cpi	r24, 0x02	; 2
 358:	81 f0       	breq	.+32     	; 0x37a <DIO_SetPinValue+0x7e>
 35a:	83 30       	cpi	r24, 0x03	; 3
 35c:	d1 f0       	breq	.+52     	; 0x392 <DIO_SetPinValue+0x96>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	19 f5       	brne	.+70     	; 0x3a8 <DIO_SetPinValue+0xac>
		{

		
			case DIO_PORTB :
			CLR_BIT(PORTB,Pin);
 362:	25 b1       	in	r18, 0x05	; 5
 364:	81 e0       	ldi	r24, 0x01	; 1
 366:	90 e0       	ldi	r25, 0x00	; 0
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_SetPinValue+0x72>
 36a:	88 0f       	add	r24, r24
 36c:	99 1f       	adc	r25, r25
 36e:	6a 95       	dec	r22
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_SetPinValue+0x6e>
 372:	80 95       	com	r24
 374:	82 23       	and	r24, r18
 376:	85 b9       	out	0x05, r24	; 5
			break;
 378:	08 95       	ret
			
			case DIO_PORTC :
			CLR_BIT(PORTC,Pin);
 37a:	28 b1       	in	r18, 0x08	; 8
 37c:	81 e0       	ldi	r24, 0x01	; 1
 37e:	90 e0       	ldi	r25, 0x00	; 0
 380:	02 c0       	rjmp	.+4      	; 0x386 <DIO_SetPinValue+0x8a>
 382:	88 0f       	add	r24, r24
 384:	99 1f       	adc	r25, r25
 386:	6a 95       	dec	r22
 388:	e2 f7       	brpl	.-8      	; 0x382 <DIO_SetPinValue+0x86>
 38a:	80 95       	com	r24
 38c:	82 23       	and	r24, r18
 38e:	88 b9       	out	0x08, r24	; 8
			break;
 390:	08 95       	ret
			
			case DIO_PORTD :
			CLR_BIT(PORTD,Pin);
 392:	2b b1       	in	r18, 0x0b	; 11
 394:	81 e0       	ldi	r24, 0x01	; 1
 396:	90 e0       	ldi	r25, 0x00	; 0
 398:	02 c0       	rjmp	.+4      	; 0x39e <DIO_SetPinValue+0xa2>
 39a:	88 0f       	add	r24, r24
 39c:	99 1f       	adc	r25, r25
 39e:	6a 95       	dec	r22
 3a0:	e2 f7       	brpl	.-8      	; 0x39a <DIO_SetPinValue+0x9e>
 3a2:	80 95       	com	r24
 3a4:	82 23       	and	r24, r18
 3a6:	8b b9       	out	0x0b, r24	; 11
 3a8:	08 95       	ret

000003aa <ENC_Init>:

	

void ENC_Init()
{
	DIO_SetPinDir(ENC_PORT , DO , DIO_PIN_INPUT );
 3aa:	40 e0       	ldi	r20, 0x00	; 0
 3ac:	64 e0       	ldi	r22, 0x04	; 4
 3ae:	83 e0       	ldi	r24, 0x03	; 3
 3b0:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(ENC_PORT , Clk, DIO_PIN_OUTPUT);
 3b4:	41 e0       	ldi	r20, 0x01	; 1
 3b6:	63 e0       	ldi	r22, 0x03	; 3
 3b8:	83 e0       	ldi	r24, 0x03	; 3
 3ba:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(ENC_PORT , CS, DIO_PIN_OUTPUT);
 3be:	41 e0       	ldi	r20, 0x01	; 1
 3c0:	62 e0       	ldi	r22, 0x02	; 2
 3c2:	83 e0       	ldi	r24, 0x03	; 3
 3c4:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 3c8:	00 00       	nop
 3ca:	08 95       	ret

000003cc <ENC_Read>:
	_delay_us(1);

}

uint16 ENC_Read(void)
{
 3cc:	ef 92       	push	r14
 3ce:	ff 92       	push	r15
 3d0:	1f 93       	push	r17
 3d2:	cf 93       	push	r28
 3d4:	df 93       	push	r29
	uint16 ANGLE = 0;
	

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
 3d6:	40 e0       	ldi	r20, 0x00	; 0
 3d8:	62 e0       	ldi	r22, 0x02	; 2
 3da:	83 e0       	ldi	r24, 0x03	; 3
 3dc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 3e0:	00 00       	nop
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 3e2:	10 e0       	ldi	r17, 0x00	; 0

}

uint16 ENC_Read(void)
{
	uint16 ANGLE = 0;
 3e4:	c0 e0       	ldi	r28, 0x00	; 0
 3e6:	d0 e0       	ldi	r29, 0x00	; 0

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 3e8:	16 c0       	rjmp	.+44     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
	{

		DIO_SetPinValue(ENC_PORT , Clk, DIO_PIN_LOW );
 3ea:	40 e0       	ldi	r20, 0x00	; 0
 3ec:	63 e0       	ldi	r22, 0x03	; 3
 3ee:	83 e0       	ldi	r24, 0x03	; 3
 3f0:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 3f4:	00 00       	nop
		_delay_us(1);
		DIO_SetPinValue(ENC_PORT , Clk, DIO_PIN_HIGH );
 3f6:	41 e0       	ldi	r20, 0x01	; 1
 3f8:	63 e0       	ldi	r22, 0x03	; 3
 3fa:	83 e0       	ldi	r24, 0x03	; 3
 3fc:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
 400:	00 00       	nop
		_delay_us(1);	
		
		ANGLE = (ANGLE << 1) | GET_BIT(PIND,DO);
 402:	cc 0f       	add	r28, r28
 404:	dd 1f       	adc	r29, r29
 406:	89 b1       	in	r24, 0x09	; 9
 408:	84 fb       	bst	r24, 4
 40a:	ee 24       	eor	r14, r14
 40c:	e0 f8       	bld	r14, 0
 40e:	f1 2c       	mov	r15, r1
 410:	ce 29       	or	r28, r14
 412:	df 29       	or	r29, r15

	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_LOW );
	_delay_us(1);
	
	
	for (uint8 i = 0;  i < ENC_MODE ; i++) 
 414:	1f 5f       	subi	r17, 0xFF	; 255
 416:	1c 30       	cpi	r17, 0x0C	; 12
 418:	40 f3       	brcs	.-48     	; 0x3ea <ENC_Read+0x1e>
		_delay_us(1);	
		
		ANGLE = (ANGLE << 1) | GET_BIT(PIND,DO);
	}
	
	DIO_SetPinValue(ENC_PORT , CS, DIO_PIN_HIGH );
 41a:	41 e0       	ldi	r20, 0x01	; 1
 41c:	62 e0       	ldi	r22, 0x02	; 2
 41e:	83 e0       	ldi	r24, 0x03	; 3
 420:	0e 94 7e 01 	call	0x2fc	; 0x2fc <DIO_SetPinValue>
	
	return ANGLE;	
}
 424:	ce 01       	movw	r24, r28
 426:	df 91       	pop	r29
 428:	cf 91       	pop	r28
 42a:	1f 91       	pop	r17
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	08 95       	ret

00000432 <ENC_Read_In_Degree>:

uint16 ENC_Read_In_Degree(void)   //--> Output is a degree between 0 and 360
{
	uint16 degree = 0;
	
	degree = (uint16)((float)ENC_Read() / step) ;
 432:	0e 94 e6 01 	call	0x3cc	; 0x3cc <ENC_Read>
 436:	bc 01       	movw	r22, r24
 438:	80 e0       	ldi	r24, 0x00	; 0
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	0e 94 6d 05 	call	0xada	; 0xada <__floatunsisf>
 440:	20 e0       	ldi	r18, 0x00	; 0
 442:	30 e0       	ldi	r19, 0x00	; 0
 444:	46 e3       	ldi	r20, 0x36	; 54
 446:	51 e4       	ldi	r21, 0x41	; 65
 448:	0e 94 cc 04 	call	0x998	; 0x998 <__divsf3>
 44c:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__fixunssfsi>

	//degree = (uint16)((float)ENC_Read_avg() / step) ;
	return (uint16)degree;
}
 450:	cb 01       	movw	r24, r22
 452:	08 95       	ret

00000454 <main>:


int main(void)
{
	
	DCMotor_Init();
 454:	0e 94 80 00 	call	0x100	; 0x100 <DCMotor_Init>
	ENC_Init();
 458:	0e 94 d5 01 	call	0x3aa	; 0x3aa <ENC_Init>
	UART_Init();
 45c:	0e 94 d5 02 	call	0x5aa	; 0x5aa <UART_Init>
	ADC_Init();
 460:	0e 94 53 00 	call	0xa6	; 0xa6 <ADC_Init>
	Dip_Switch_Init();
 464:	0e 94 3d 03 	call	0x67a	; 0x67a <Dip_Switch_Init>
	Update_Boundries();
 468:	0e 94 16 04 	call	0x82c	; 0x82c <Update_Boundries>
	
	//Timer1_SetDelay(30);
	
	//Timer1_Start();
	
	if(Middle_Position == 0xFF)
 46c:	80 91 3f 01 	lds	r24, 0x013F	; 0x80013f <Middle_Position>
 470:	90 91 40 01 	lds	r25, 0x0140	; 0x800140 <Middle_Position+0x1>
 474:	8f 3f       	cpi	r24, 0xFF	; 255
 476:	91 05       	cpc	r25, r1
 478:	11 f4       	brne	.+4      	; 0x47e <main+0x2a>
	{
		EINGELERNET = false;
 47a:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <EINGELERNET>
    /* Replace with your application code */
    while (1) 
    {

		
		Update_Mode();
 47e:	0e 94 48 03 	call	0x690	; 0x690 <Update_Mode>
		if(mode == CALIBRATION_MODE)
 482:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 486:	81 11       	cpse	r24, r1
 488:	02 c0       	rjmp	.+4      	; 0x48e <main+0x3a>
		{
			Calibration();
 48a:	0e 94 35 04 	call	0x86a	; 0x86a <Calibration>
		}
		if(mode == DRIVING_MODE)
 48e:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <mode>
 492:	81 30       	cpi	r24, 0x01	; 1
 494:	09 f0       	breq	.+2      	; 0x498 <main+0x44>
 496:	43 c0       	rjmp	.+134    	; 0x51e <main+0xca>
			
			//Update_Global_ADC_Direction();
			//ADC_DRIVE_TEST();	
			//Drive_Untill_Reach_End();		
			//Drive_Untill_Reach_End();
			CABLES_READ();
 498:	0e 94 0a 03 	call	0x614	; 0x614 <CABLES_READ>
			FAHREN();
 49c:	0e 94 0b 04 	call	0x816	; 0x816 <FAHREN>
			//Generic_Drive();
			
			if((Read_ADC(PINK_CABLE) < 400) && (Read_ADC(BLUE_CABLE) < 400))
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 4a6:	80 39       	cpi	r24, 0x90	; 144
 4a8:	91 40       	sbci	r25, 0x01	; 1
 4aa:	c8 f5       	brcc	.+114    	; 0x51e <main+0xca>
 4ac:	81 e0       	ldi	r24, 0x01	; 1
 4ae:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 4b2:	80 39       	cpi	r24, 0x90	; 144
 4b4:	91 40       	sbci	r25, 0x01	; 1
 4b6:	98 f5       	brcc	.+102    	; 0x51e <main+0xca>
			{
				if(POSITION != MIDDLE)
 4b8:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <POSITION>
 4bc:	90 91 4c 01 	lds	r25, 0x014C	; 0x80014c <__bss_end>
 4c0:	02 97       	sbiw	r24, 0x02	; 2
 4c2:	69 f1       	breq	.+90     	; 0x51e <main+0xca>
				{
					uint16 ziel = Middle_Position;
 4c4:	c0 91 3f 01 	lds	r28, 0x013F	; 0x80013f <Middle_Position>
 4c8:	d0 91 40 01 	lds	r29, 0x0140	; 0x800140 <Middle_Position+0x1>

					DCMotor_SetDir(DC_Motor_Dir_Calc(ziel , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
 4cc:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 4d0:	bc 01       	movw	r22, r24
 4d2:	ce 01       	movw	r24, r28
 4d4:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 4d8:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
					DCMotor_SetSpeed(10);
 4dc:	8a e0       	ldi	r24, 0x0A	; 10
 4de:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
					while(!(abs(ziel - ENC_Read_In_Degree()  < 3))) // The programm will be stuck here until DC Motor get close to the Desired position
 4e2:	0d c0       	rjmp	.+26     	; 0x4fe <main+0xaa>
					{
						UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 4e4:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 4e8:	4a e0       	ldi	r20, 0x0A	; 10
 4ea:	50 e0       	ldi	r21, 0x00	; 0
 4ec:	62 e0       	ldi	r22, 0x02	; 2
 4ee:	71 e0       	ldi	r23, 0x01	; 1
 4f0:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
 4f4:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
						UART_SendByte('\n');
 4f8:	8a e0       	ldi	r24, 0x0A	; 10
 4fa:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
				{
					uint16 ziel = Middle_Position;

					DCMotor_SetDir(DC_Motor_Dir_Calc(ziel , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
					DCMotor_SetSpeed(10);
					while(!(abs(ziel - ENC_Read_In_Degree()  < 3))) // The programm will be stuck here until DC Motor get close to the Desired position
 4fe:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 502:	9e 01       	movw	r18, r28
 504:	28 1b       	sub	r18, r24
 506:	39 0b       	sbc	r19, r25
 508:	23 30       	cpi	r18, 0x03	; 3
 50a:	31 05       	cpc	r19, r1
 50c:	58 f7       	brcc	.-42     	; 0x4e4 <main+0x90>
					{
						UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
						UART_SendByte('\n');
					}
					DCMotor_Stop();
 50e:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
					POSITION = MIDDLE;
 512:	82 e0       	ldi	r24, 0x02	; 2
 514:	90 e0       	ldi	r25, 0x00	; 0
 516:	90 93 4c 01 	sts	0x014C, r25	; 0x80014c <__bss_end>
 51a:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <POSITION>
				}
			} 
		}	
		UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 51e:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 522:	4a e0       	ldi	r20, 0x0A	; 10
 524:	50 e0       	ldi	r21, 0x00	; 0
 526:	62 e0       	ldi	r22, 0x02	; 2
 528:	71 e0       	ldi	r23, 0x01	; 1
 52a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
 52e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
		UART_SendByte('\n');		
 532:	8a e0       	ldi	r24, 0x0A	; 10
 534:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
		
	}
 538:	a2 cf       	rjmp	.-188    	; 0x47e <main+0x2a>

0000053a <__vector_11>:




ISR (TIMER1_COMPA_vect)
{
 53a:	1f 92       	push	r1
 53c:	0f 92       	push	r0
 53e:	0f b6       	in	r0, 0x3f	; 63
 540:	0f 92       	push	r0
 542:	11 24       	eor	r1, r1
 544:	2f 93       	push	r18
 546:	3f 93       	push	r19
 548:	4f 93       	push	r20
 54a:	5f 93       	push	r21
 54c:	6f 93       	push	r22
 54e:	7f 93       	push	r23
 550:	8f 93       	push	r24
 552:	9f 93       	push	r25
 554:	af 93       	push	r26
 556:	bf 93       	push	r27
 558:	ef 93       	push	r30
 55a:	ff 93       	push	r31
	static uint8 cnt = 0;
	
	cnt++;
 55c:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <__data_end>
 560:	8f 5f       	subi	r24, 0xFF	; 255
 562:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <__data_end>
	
	if(cnt == 1)
 566:	81 30       	cpi	r24, 0x01	; 1
 568:	79 f4       	brne	.+30     	; 0x588 <__vector_11+0x4e>
	{
		cnt = 0;
 56a:	10 92 3c 01 	sts	0x013C, r1	; 0x80013c <__data_end>
		
		UART_SendString(itoa(ENC_Read_In_Degree() , UART_BUFFER , 10));
 56e:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 572:	4a e0       	ldi	r20, 0x0A	; 10
 574:	50 e0       	ldi	r21, 0x00	; 0
 576:	62 e0       	ldi	r22, 0x02	; 2
 578:	71 e0       	ldi	r23, 0x01	; 1
 57a:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
 57e:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
		UART_SendByte('\n');
 582:	8a e0       	ldi	r24, 0x0A	; 10
 584:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
		//UART_Send_Degree(ENC_Read_In_Degree());
		
		//UART_SendByte(ENC_Read_In_Degree());
	}
	
}
 588:	ff 91       	pop	r31
 58a:	ef 91       	pop	r30
 58c:	bf 91       	pop	r27
 58e:	af 91       	pop	r26
 590:	9f 91       	pop	r25
 592:	8f 91       	pop	r24
 594:	7f 91       	pop	r23
 596:	6f 91       	pop	r22
 598:	5f 91       	pop	r21
 59a:	4f 91       	pop	r20
 59c:	3f 91       	pop	r19
 59e:	2f 91       	pop	r18
 5a0:	0f 90       	pop	r0
 5a2:	0f be       	out	0x3f, r0	; 63
 5a4:	0f 90       	pop	r0
 5a6:	1f 90       	pop	r1
 5a8:	18 95       	reti

000005aa <UART_Init>:
void UART_Init(void)
{
	
	uint32 BR_Value = 0;
	
	DIO_SetPinDir(PORTD, PIND0, DIO_PIN_INPUT);
 5aa:	8b b1       	in	r24, 0x0b	; 11
 5ac:	40 e0       	ldi	r20, 0x00	; 0
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	DIO_SetPinDir(PORTD, PIND1, DIO_PIN_OUTPUT);
 5b4:	8b b1       	in	r24, 0x0b	; 11
 5b6:	41 e0       	ldi	r20, 0x01	; 1
 5b8:	61 e0       	ldi	r22, 0x01	; 1
 5ba:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
	


	UCSR0B |= 0x18 ; // --> RXEN0 - TXEN0 --> Enabled Transmit and Receive
 5be:	e1 ec       	ldi	r30, 0xC1	; 193
 5c0:	f0 e0       	ldi	r31, 0x00	; 0
 5c2:	80 81       	ld	r24, Z
 5c4:	88 61       	ori	r24, 0x18	; 24
 5c6:	80 83       	st	Z, r24
	//UCSR0B |= 0xC0 ; // --> RXCIE0 - TXCIE0 --> to enable uart RX and TX Interrupt if you don't want Interrupt and keep polling just Comment the line 
	UCSR0C |= 0x06 ; // --> Only  UCSZ00 and UCSZ01 are set --> 8-Bit Frame
 5c8:	e2 ec       	ldi	r30, 0xC2	; 194
 5ca:	f0 e0       	ldi	r31, 0x00	; 0
 5cc:	80 81       	ld	r24, Z
 5ce:	86 60       	ori	r24, 0x06	; 6
 5d0:	80 83       	st	Z, r24
	#endif
	
	
	//BR_Value = ((160000) / (16 * (192))) - 1;
	
	UBRR0H = (BR_Value) >> 8;
 5d2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = (BR_Value & 0xFF);
 5d6:	87 e6       	ldi	r24, 0x67	; 103
 5d8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 5dc:	08 95       	ret

000005de <UART_SendByte>:
	/*
	UDR0 = data;
	
	while(GET_BIT(UCSR0A , 5) == 0 );
	*/
	while(!(UCSR0A & (1 << UDRE0 )));
 5de:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 5e2:	95 ff       	sbrs	r25, 5
 5e4:	fc cf       	rjmp	.-8      	; 0x5de <UART_SendByte>
	
	UDR0 = data;
 5e6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 5ea:	08 95       	ret

000005ec <UART_SendString>:
	
}

void UART_SendString(uint8* str)
{
 5ec:	cf 93       	push	r28
	uint8 i = 0;
 5ee:	c0 e0       	ldi	r28, 0x00	; 0
	
	while(UART_BUFFER[i] != '\0')
 5f0:	07 c0       	rjmp	.+14     	; 0x600 <UART_SendString+0x14>
	{
		UART_SendByte(UART_BUFFER[i]);
 5f2:	fc 01       	movw	r30, r24
 5f4:	ee 5f       	subi	r30, 0xFE	; 254
 5f6:	fe 4f       	sbci	r31, 0xFE	; 254
 5f8:	80 81       	ld	r24, Z
 5fa:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
		i++;
 5fe:	cf 5f       	subi	r28, 0xFF	; 255

void UART_SendString(uint8* str)
{
	uint8 i = 0;
	
	while(UART_BUFFER[i] != '\0')
 600:	8c 2f       	mov	r24, r28
 602:	90 e0       	ldi	r25, 0x00	; 0
 604:	fc 01       	movw	r30, r24
 606:	ee 5f       	subi	r30, 0xFE	; 254
 608:	fe 4f       	sbci	r31, 0xFE	; 254
 60a:	20 81       	ld	r18, Z
 60c:	21 11       	cpse	r18, r1
 60e:	f1 cf       	rjmp	.-30     	; 0x5f2 <UART_SendString+0x6>
	{
		UART_SendByte(UART_BUFFER[i]);
		i++;
	}
		
}
 610:	cf 91       	pop	r28
 612:	08 95       	ret

00000614 <CABLES_READ>:
{
	DCMotor_SetDir(DC_Motor_Dir_Calc(Desired_Degree , ENC_Read_In_Degree())); //Calculate the shortest route to Desired Position
	DCMotor_SetSpeed(10);
	while(!(abs(Desired_Degree - ENC_Read_In_Degree() ) < 3)); // The programm will be stuck here until DC Motor get close to the Desired position
	DCMotor_Stop();	
}
 614:	80 e0       	ldi	r24, 0x00	; 0
 616:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 61a:	81 39       	cpi	r24, 0x91	; 145
 61c:	91 40       	sbci	r25, 0x01	; 1
 61e:	18 f0       	brcs	.+6      	; 0x626 <CABLES_READ+0x12>
 620:	81 e0       	ldi	r24, 0x01	; 1
 622:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <cables>
 626:	81 e0       	ldi	r24, 0x01	; 1
 628:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 62c:	81 39       	cpi	r24, 0x91	; 145
 62e:	91 40       	sbci	r25, 0x01	; 1
 630:	18 f0       	brcs	.+6      	; 0x638 <CABLES_READ+0x24>
 632:	81 e0       	ldi	r24, 0x01	; 1
 634:	80 93 49 01 	sts	0x0149, r24	; 0x800149 <cables+0x1>
 638:	80 e0       	ldi	r24, 0x00	; 0
 63a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 63e:	80 39       	cpi	r24, 0x90	; 144
 640:	91 40       	sbci	r25, 0x01	; 1
 642:	10 f4       	brcc	.+4      	; 0x648 <CABLES_READ+0x34>
 644:	10 92 48 01 	sts	0x0148, r1	; 0x800148 <cables>
 648:	81 e0       	ldi	r24, 0x01	; 1
 64a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 64e:	80 39       	cpi	r24, 0x90	; 144
 650:	91 40       	sbci	r25, 0x01	; 1
 652:	10 f4       	brcc	.+4      	; 0x658 <CABLES_READ+0x44>
 654:	10 92 49 01 	sts	0x0149, r1	; 0x800149 <cables+0x1>
 658:	80 e0       	ldi	r24, 0x00	; 0
 65a:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 65e:	81 39       	cpi	r24, 0x91	; 145
 660:	91 40       	sbci	r25, 0x01	; 1
 662:	50 f0       	brcs	.+20     	; 0x678 <CABLES_READ+0x64>
 664:	81 e0       	ldi	r24, 0x01	; 1
 666:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 66a:	81 39       	cpi	r24, 0x91	; 145
 66c:	91 40       	sbci	r25, 0x01	; 1
 66e:	20 f0       	brcs	.+8      	; 0x678 <CABLES_READ+0x64>
 670:	e8 e4       	ldi	r30, 0x48	; 72
 672:	f1 e0       	ldi	r31, 0x01	; 1
 674:	11 82       	std	Z+1, r1	; 0x01
 676:	10 82       	st	Z, r1
 678:	08 95       	ret

0000067a <Dip_Switch_Init>:
 67a:	40 e0       	ldi	r20, 0x00	; 0
 67c:	64 e0       	ldi	r22, 0x04	; 4
 67e:	82 e0       	ldi	r24, 0x02	; 2
 680:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 684:	40 e0       	ldi	r20, 0x00	; 0
 686:	65 e0       	ldi	r22, 0x05	; 5
 688:	82 e0       	ldi	r24, 0x02	; 2
 68a:	0e 94 1b 01 	call	0x236	; 0x236 <DIO_SetPinDir>
 68e:	08 95       	ret

00000690 <Update_Mode>:
 690:	cf 93       	push	r28
 692:	df 93       	push	r29
 694:	85 e0       	ldi	r24, 0x05	; 5
 696:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 69a:	ec 01       	movw	r28, r24
 69c:	84 e0       	ldi	r24, 0x04	; 4
 69e:	0e 94 6a 00 	call	0xd4	; 0xd4 <Read_ADC>
 6a2:	c1 39       	cpi	r28, 0x91	; 145
 6a4:	21 e0       	ldi	r18, 0x01	; 1
 6a6:	d2 07       	cpc	r29, r18
 6a8:	40 f0       	brcs	.+16     	; 0x6ba <Update_Mode+0x2a>
 6aa:	80 39       	cpi	r24, 0x90	; 144
 6ac:	21 e0       	ldi	r18, 0x01	; 1
 6ae:	92 07       	cpc	r25, r18
 6b0:	20 f4       	brcc	.+8      	; 0x6ba <Update_Mode+0x2a>
 6b2:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <UART_BUFFER>
 6b6:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <mode>
 6ba:	81 39       	cpi	r24, 0x91	; 145
 6bc:	21 e0       	ldi	r18, 0x01	; 1
 6be:	92 07       	cpc	r25, r18
 6c0:	50 f0       	brcs	.+20     	; 0x6d6 <Update_Mode+0x46>
 6c2:	c0 39       	cpi	r28, 0x90	; 144
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	d2 07       	cpc	r29, r18
 6c8:	30 f4       	brcc	.+12     	; 0x6d6 <Update_Mode+0x46>
 6ca:	21 e0       	ldi	r18, 0x01	; 1
 6cc:	30 e0       	ldi	r19, 0x00	; 0
 6ce:	30 93 02 01 	sts	0x0102, r19	; 0x800102 <UART_BUFFER>
 6d2:	20 93 01 01 	sts	0x0101, r18	; 0x800101 <mode>
 6d6:	80 39       	cpi	r24, 0x90	; 144
 6d8:	21 e0       	ldi	r18, 0x01	; 1
 6da:	92 07       	cpc	r25, r18
 6dc:	20 f4       	brcc	.+8      	; 0x6e6 <Update_Mode+0x56>
 6de:	c0 39       	cpi	r28, 0x90	; 144
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	d2 07       	cpc	r29, r18
 6e4:	30 f0       	brcs	.+12     	; 0x6f2 <Update_Mode+0x62>
 6e6:	81 39       	cpi	r24, 0x91	; 145
 6e8:	91 40       	sbci	r25, 0x01	; 1
 6ea:	48 f0       	brcs	.+18     	; 0x6fe <Update_Mode+0x6e>
 6ec:	c1 39       	cpi	r28, 0x91	; 145
 6ee:	d1 40       	sbci	r29, 0x01	; 1
 6f0:	30 f0       	brcs	.+12     	; 0x6fe <Update_Mode+0x6e>
 6f2:	82 e0       	ldi	r24, 0x02	; 2
 6f4:	90 e0       	ldi	r25, 0x00	; 0
 6f6:	90 93 02 01 	sts	0x0102, r25	; 0x800102 <UART_BUFFER>
 6fa:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <mode>
 6fe:	df 91       	pop	r29
 700:	cf 91       	pop	r28
 702:	08 95       	ret

00000704 <Drive_To_Max_Right>:
 704:	0f 93       	push	r16
 706:	1f 93       	push	r17
 708:	cf 93       	push	r28
 70a:	df 93       	push	r29
 70c:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <POSITION>
 710:	88 23       	and	r24, r24
 712:	a1 f1       	breq	.+104    	; 0x77c <Drive_To_Max_Right+0x78>
 714:	00 91 43 01 	lds	r16, 0x0143	; 0x800143 <max_right_angle>
 718:	10 91 44 01 	lds	r17, 0x0144	; 0x800144 <max_right_angle+0x1>
 71c:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 720:	bc 01       	movw	r22, r24
 722:	c8 01       	movw	r24, r16
 724:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 728:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
 72c:	8a e0       	ldi	r24, 0x0A	; 10
 72e:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 732:	10 c0       	rjmp	.+32     	; 0x754 <Drive_To_Max_Right+0x50>
 734:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <UART_BUFFER>
 738:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <UART_BUFFER+0x1>
 73c:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 740:	4a e0       	ldi	r20, 0x0A	; 10
 742:	50 e0       	ldi	r21, 0x00	; 0
 744:	be 01       	movw	r22, r28
 746:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
 74a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
 74e:	8a e0       	ldi	r24, 0x0A	; 10
 750:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
 754:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 758:	98 01       	movw	r18, r16
 75a:	28 1b       	sub	r18, r24
 75c:	39 0b       	sbc	r19, r25
 75e:	23 30       	cpi	r18, 0x03	; 3
 760:	31 05       	cpc	r19, r1
 762:	40 f7       	brcc	.-48     	; 0x734 <Drive_To_Max_Right+0x30>
 764:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 768:	10 92 4b 01 	sts	0x014B, r1	; 0x80014b <POSITION>
 76c:	80 91 43 01 	lds	r24, 0x0143	; 0x800143 <max_right_angle>
 770:	90 91 44 01 	lds	r25, 0x0144	; 0x800144 <max_right_angle+0x1>
 774:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Reached_Position+0x1>
 778:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Reached_Position>
 77c:	df 91       	pop	r29
 77e:	cf 91       	pop	r28
 780:	1f 91       	pop	r17
 782:	0f 91       	pop	r16
 784:	08 95       	ret

00000786 <Drive_To_Max_Left>:
 786:	0f 93       	push	r16
 788:	1f 93       	push	r17
 78a:	cf 93       	push	r28
 78c:	df 93       	push	r29
 78e:	80 91 4b 01 	lds	r24, 0x014B	; 0x80014b <POSITION>
 792:	81 30       	cpi	r24, 0x01	; 1
 794:	d9 f1       	breq	.+118    	; 0x80c <__DATA_REGION_LENGTH__+0xc>
 796:	00 91 41 01 	lds	r16, 0x0141	; 0x800141 <max_left_angle>
 79a:	10 91 42 01 	lds	r17, 0x0142	; 0x800142 <max_left_angle+0x1>
 79e:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 7a2:	bc 01       	movw	r22, r24
 7a4:	c8 01       	movw	r24, r16
 7a6:	0e 94 f1 00 	call	0x1e2	; 0x1e2 <DC_Motor_Dir_Calc>
 7aa:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
 7ae:	8a e0       	ldi	r24, 0x0A	; 10
 7b0:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 7b4:	10 c0       	rjmp	.+32     	; 0x7d6 <Drive_To_Max_Left+0x50>
 7b6:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <UART_BUFFER>
 7ba:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <UART_BUFFER+0x1>
 7be:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 7c2:	4a e0       	ldi	r20, 0x0A	; 10
 7c4:	50 e0       	ldi	r21, 0x00	; 0
 7c6:	be 01       	movw	r22, r28
 7c8:	0e 94 fb 05 	call	0xbf6	; 0xbf6 <itoa>
 7cc:	0e 94 f6 02 	call	0x5ec	; 0x5ec <UART_SendString>
 7d0:	8a e0       	ldi	r24, 0x0A	; 10
 7d2:	0e 94 ef 02 	call	0x5de	; 0x5de <UART_SendByte>
 7d6:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 7da:	98 01       	movw	r18, r16
 7dc:	28 1b       	sub	r18, r24
 7de:	39 0b       	sbc	r19, r25
 7e0:	c9 01       	movw	r24, r18
 7e2:	99 23       	and	r25, r25
 7e4:	24 f4       	brge	.+8      	; 0x7ee <Drive_To_Max_Left+0x68>
 7e6:	88 27       	eor	r24, r24
 7e8:	99 27       	eor	r25, r25
 7ea:	82 1b       	sub	r24, r18
 7ec:	93 0b       	sbc	r25, r19
 7ee:	02 97       	sbiw	r24, 0x02	; 2
 7f0:	14 f7       	brge	.-60     	; 0x7b6 <Drive_To_Max_Left+0x30>
 7f2:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 7f6:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <max_left_angle>
 7fa:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <max_left_angle+0x1>
 7fe:	90 93 3e 01 	sts	0x013E, r25	; 0x80013e <Reached_Position+0x1>
 802:	80 93 3d 01 	sts	0x013D, r24	; 0x80013d <Reached_Position>
 806:	81 e0       	ldi	r24, 0x01	; 1
 808:	80 93 4b 01 	sts	0x014B, r24	; 0x80014b <POSITION>
 80c:	df 91       	pop	r29
 80e:	cf 91       	pop	r28
 810:	1f 91       	pop	r17
 812:	0f 91       	pop	r16
 814:	08 95       	ret

00000816 <FAHREN>:
 816:	80 91 49 01 	lds	r24, 0x0149	; 0x800149 <cables+0x1>
 81a:	81 11       	cpse	r24, r1
 81c:	0e 94 c3 03 	call	0x786	; 0x786 <Drive_To_Max_Left>
 820:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <cables>
 824:	81 11       	cpse	r24, r1
 826:	0e 94 82 03 	call	0x704	; 0x704 <Drive_To_Max_Right>
 82a:	08 95       	ret

0000082c <Update_Boundries>:


void Update_Boundries(void)
{
	max_right_angle = eeprom_read_word (  (uint16 *) RIGHT_ADDR );
 82c:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <RIGHT_ADDR>
 830:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <RIGHT_ADDR+0x1>
 834:	0e 94 3b 06 	call	0xc76	; 0xc76 <eeprom_read_word>
 838:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <max_right_angle+0x1>
 83c:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <max_right_angle>
	max_left_angle  = eeprom_read_word (  (uint16 *) LEFT_ADDR );
 840:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <LEFT_ADDR>
 844:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <LEFT_ADDR+0x1>
 848:	0e 94 3b 06 	call	0xc76	; 0xc76 <eeprom_read_word>
 84c:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <max_left_angle+0x1>
 850:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <max_left_angle>
	Middle_Position = eeprom_read_word (  (uint16 *) MIDDLE_ADDR );
 854:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MIDDLE_ADDR>
 858:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <MIDDLE_ADDR+0x1>
 85c:	0e 94 3b 06 	call	0xc76	; 0xc76 <eeprom_read_word>
 860:	90 93 40 01 	sts	0x0140, r25	; 0x800140 <Middle_Position+0x1>
 864:	80 93 3f 01 	sts	0x013F, r24	; 0x80013f <Middle_Position>
 868:	08 95       	ret

0000086a <Calibration>:



void Calibration(void)
{
	DCMotor_SetDir(CLOCK_WISE_DIR);
 86a:	80 e0       	ldi	r24, 0x00	; 0
 86c:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
	DCMotor_SetSpeed(10);
 870:	8a e0       	ldi	r24, 0x0A	; 10
 872:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 876:	2f ef       	ldi	r18, 0xFF	; 255
 878:	8f e0       	ldi	r24, 0x0F	; 15
 87a:	97 e2       	ldi	r25, 0x27	; 39
 87c:	21 50       	subi	r18, 0x01	; 1
 87e:	80 40       	sbci	r24, 0x00	; 0
 880:	90 40       	sbci	r25, 0x00	; 0
 882:	e1 f7       	brne	.-8      	; 0x87c <Calibration+0x12>
 884:	00 c0       	rjmp	.+0      	; 0x886 <Calibration+0x1c>
 886:	00 00       	nop
	
	_delay_ms(800);
	
	DCMotor_Stop();
 888:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 88c:	2f ef       	ldi	r18, 0xFF	; 255
 88e:	89 e6       	ldi	r24, 0x69	; 105
 890:	98 e1       	ldi	r25, 0x18	; 24
 892:	21 50       	subi	r18, 0x01	; 1
 894:	80 40       	sbci	r24, 0x00	; 0
 896:	90 40       	sbci	r25, 0x00	; 0
 898:	e1 f7       	brne	.-8      	; 0x892 <Calibration+0x28>
 89a:	00 c0       	rjmp	.+0      	; 0x89c <Calibration+0x32>
 89c:	00 00       	nop
	_delay_ms(500);
	
	max_right_angle = ENC_Read_In_Degree();
 89e:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 8a2:	90 93 44 01 	sts	0x0144, r25	; 0x800144 <max_right_angle+0x1>
 8a6:	80 93 43 01 	sts	0x0143, r24	; 0x800143 <max_right_angle>
	
	
	DCMotor_SetDir(ANTI_CLOCK_WISE_DIR);
 8aa:	81 e0       	ldi	r24, 0x01	; 1
 8ac:	0e 94 90 00 	call	0x120	; 0x120 <DCMotor_SetDir>
	DCMotor_SetSpeed(10);
 8b0:	8a e0       	ldi	r24, 0x0A	; 10
 8b2:	0e 94 c0 00 	call	0x180	; 0x180 <DCMotor_SetSpeed>
 8b6:	2f ef       	ldi	r18, 0xFF	; 255
 8b8:	8f e0       	ldi	r24, 0x0F	; 15
 8ba:	97 e2       	ldi	r25, 0x27	; 39
 8bc:	21 50       	subi	r18, 0x01	; 1
 8be:	80 40       	sbci	r24, 0x00	; 0
 8c0:	90 40       	sbci	r25, 0x00	; 0
 8c2:	e1 f7       	brne	.-8      	; 0x8bc <Calibration+0x52>
 8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <Calibration+0x5c>
 8c6:	00 00       	nop
	
	_delay_ms(800);
	
	DCMotor_Stop();
 8c8:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <DCMotor_Stop>
 8cc:	2f ef       	ldi	r18, 0xFF	; 255
 8ce:	89 e6       	ldi	r24, 0x69	; 105
 8d0:	98 e1       	ldi	r25, 0x18	; 24
 8d2:	21 50       	subi	r18, 0x01	; 1
 8d4:	80 40       	sbci	r24, 0x00	; 0
 8d6:	90 40       	sbci	r25, 0x00	; 0
 8d8:	e1 f7       	brne	.-8      	; 0x8d2 <Calibration+0x68>
 8da:	00 c0       	rjmp	.+0      	; 0x8dc <Calibration+0x72>
 8dc:	00 00       	nop
	_delay_ms(500);

	
	max_left_angle = ENC_Read_In_Degree();
 8de:	0e 94 19 02 	call	0x432	; 0x432 <ENC_Read_In_Degree>
 8e2:	90 93 42 01 	sts	0x0142, r25	; 0x800142 <max_left_angle+0x1>
 8e6:	80 93 41 01 	sts	0x0141, r24	; 0x800141 <max_left_angle>
	
	if(max_right_angle > max_left_angle)
 8ea:	20 91 43 01 	lds	r18, 0x0143	; 0x800143 <max_right_angle>
 8ee:	30 91 44 01 	lds	r19, 0x0144	; 0x800144 <max_right_angle+0x1>
 8f2:	82 17       	cp	r24, r18
 8f4:	93 07       	cpc	r25, r19
 8f6:	7c f4       	brge	.+30     	; 0x916 <__stack+0x17>
	{

		Middle_Position = max_left_angle + ((max_right_angle - max_left_angle) / 2 );
 8f8:	28 1b       	sub	r18, r24
 8fa:	39 0b       	sbc	r19, r25
 8fc:	a9 01       	movw	r20, r18
 8fe:	12 f4       	brpl	.+4      	; 0x904 <__stack+0x5>
 900:	4f 5f       	subi	r20, 0xFF	; 255
 902:	5f 4f       	sbci	r21, 0xFF	; 255
 904:	55 95       	asr	r21
 906:	47 95       	ror	r20
 908:	48 0f       	add	r20, r24
 90a:	59 1f       	adc	r21, r25
 90c:	50 93 40 01 	sts	0x0140, r21	; 0x800140 <Middle_Position+0x1>
 910:	40 93 3f 01 	sts	0x013F, r20	; 0x80013f <Middle_Position>
 914:	1f c0       	rjmp	.+62     	; 0x954 <__stack+0x55>

	}
	else
	{
		Middle_Position = (max_left_angle + max_right_angle) / 2;
 916:	28 0f       	add	r18, r24
 918:	39 1f       	adc	r19, r25
 91a:	33 23       	and	r19, r19
 91c:	14 f4       	brge	.+4      	; 0x922 <__stack+0x23>
 91e:	2f 5f       	subi	r18, 0xFF	; 255
 920:	3f 4f       	sbci	r19, 0xFF	; 255
 922:	35 95       	asr	r19
 924:	27 95       	ror	r18
 926:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <Middle_Position+0x1>
 92a:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <Middle_Position>
		if(Middle_Position > (circle / 2))
 92e:	40 91 34 01 	lds	r20, 0x0134	; 0x800134 <circle>
 932:	50 91 35 01 	lds	r21, 0x0135	; 0x800135 <circle+0x1>
 936:	55 23       	and	r21, r21
 938:	14 f4       	brge	.+4      	; 0x93e <__stack+0x3f>
 93a:	4f 5f       	subi	r20, 0xFF	; 255
 93c:	5f 4f       	sbci	r21, 0xFF	; 255
 93e:	55 95       	asr	r21
 940:	47 95       	ror	r20
 942:	42 17       	cp	r20, r18
 944:	53 07       	cpc	r21, r19
 946:	34 f4       	brge	.+12     	; 0x954 <__stack+0x55>
		{
			
			Middle_Position -= (circle /2);
 948:	24 1b       	sub	r18, r20
 94a:	35 0b       	sbc	r19, r21
 94c:	30 93 40 01 	sts	0x0140, r19	; 0x800140 <Middle_Position+0x1>
 950:	20 93 3f 01 	sts	0x013F, r18	; 0x80013f <Middle_Position>
		}
	}
	
	eeprom_update_word((uint16 *) LEFT_ADDR , max_left_angle);
 954:	bc 01       	movw	r22, r24
 956:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <LEFT_ADDR>
 95a:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <LEFT_ADDR+0x1>
 95e:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_word>
	eeprom_update_word((uint16 *) RIGHT_ADDR , max_right_angle);
 962:	60 91 43 01 	lds	r22, 0x0143	; 0x800143 <max_right_angle>
 966:	70 91 44 01 	lds	r23, 0x0144	; 0x800144 <max_right_angle+0x1>
 96a:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <RIGHT_ADDR>
 96e:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <RIGHT_ADDR+0x1>
 972:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_word>
	eeprom_update_word((uint16 *) MIDDLE_ADDR , Middle_Position);
 976:	60 91 3f 01 	lds	r22, 0x013F	; 0x80013f <Middle_Position>
 97a:	70 91 40 01 	lds	r23, 0x0140	; 0x800140 <Middle_Position+0x1>
 97e:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <MIDDLE_ADDR>
 982:	90 91 37 01 	lds	r25, 0x0137	; 0x800137 <MIDDLE_ADDR+0x1>
 986:	0e 94 41 06 	call	0xc82	; 0xc82 <eeprom_update_word>
	
	EINGELERNET = true;
 98a:	81 e0       	ldi	r24, 0x01	; 1
 98c:	90 e0       	ldi	r25, 0x00	; 0
 98e:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <DRIVE_WITH_CABLES>
 992:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <EINGELERNET>
 996:	08 95       	ret

00000998 <__divsf3>:
 998:	0e 94 e0 04 	call	0x9c0	; 0x9c0 <__divsf3x>
 99c:	0c 94 c1 05 	jmp	0xb82	; 0xb82 <__fp_round>
 9a0:	0e 94 ba 05 	call	0xb74	; 0xb74 <__fp_pscB>
 9a4:	58 f0       	brcs	.+22     	; 0x9bc <__divsf3+0x24>
 9a6:	0e 94 b3 05 	call	0xb66	; 0xb66 <__fp_pscA>
 9aa:	40 f0       	brcs	.+16     	; 0x9bc <__divsf3+0x24>
 9ac:	29 f4       	brne	.+10     	; 0x9b8 <__divsf3+0x20>
 9ae:	5f 3f       	cpi	r21, 0xFF	; 255
 9b0:	29 f0       	breq	.+10     	; 0x9bc <__divsf3+0x24>
 9b2:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 9b6:	51 11       	cpse	r21, r1
 9b8:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 9bc:	0c 94 b0 05 	jmp	0xb60	; 0xb60 <__fp_nan>

000009c0 <__divsf3x>:
 9c0:	0e 94 d2 05 	call	0xba4	; 0xba4 <__fp_split3>
 9c4:	68 f3       	brcs	.-38     	; 0x9a0 <__divsf3+0x8>

000009c6 <__divsf3_pse>:
 9c6:	99 23       	and	r25, r25
 9c8:	b1 f3       	breq	.-20     	; 0x9b6 <__divsf3+0x1e>
 9ca:	55 23       	and	r21, r21
 9cc:	91 f3       	breq	.-28     	; 0x9b2 <__divsf3+0x1a>
 9ce:	95 1b       	sub	r25, r21
 9d0:	55 0b       	sbc	r21, r21
 9d2:	bb 27       	eor	r27, r27
 9d4:	aa 27       	eor	r26, r26
 9d6:	62 17       	cp	r22, r18
 9d8:	73 07       	cpc	r23, r19
 9da:	84 07       	cpc	r24, r20
 9dc:	38 f0       	brcs	.+14     	; 0x9ec <__divsf3_pse+0x26>
 9de:	9f 5f       	subi	r25, 0xFF	; 255
 9e0:	5f 4f       	sbci	r21, 0xFF	; 255
 9e2:	22 0f       	add	r18, r18
 9e4:	33 1f       	adc	r19, r19
 9e6:	44 1f       	adc	r20, r20
 9e8:	aa 1f       	adc	r26, r26
 9ea:	a9 f3       	breq	.-22     	; 0x9d6 <__divsf3_pse+0x10>
 9ec:	35 d0       	rcall	.+106    	; 0xa58 <__divsf3_pse+0x92>
 9ee:	0e 2e       	mov	r0, r30
 9f0:	3a f0       	brmi	.+14     	; 0xa00 <__divsf3_pse+0x3a>
 9f2:	e0 e8       	ldi	r30, 0x80	; 128
 9f4:	32 d0       	rcall	.+100    	; 0xa5a <__divsf3_pse+0x94>
 9f6:	91 50       	subi	r25, 0x01	; 1
 9f8:	50 40       	sbci	r21, 0x00	; 0
 9fa:	e6 95       	lsr	r30
 9fc:	00 1c       	adc	r0, r0
 9fe:	ca f7       	brpl	.-14     	; 0x9f2 <__divsf3_pse+0x2c>
 a00:	2b d0       	rcall	.+86     	; 0xa58 <__divsf3_pse+0x92>
 a02:	fe 2f       	mov	r31, r30
 a04:	29 d0       	rcall	.+82     	; 0xa58 <__divsf3_pse+0x92>
 a06:	66 0f       	add	r22, r22
 a08:	77 1f       	adc	r23, r23
 a0a:	88 1f       	adc	r24, r24
 a0c:	bb 1f       	adc	r27, r27
 a0e:	26 17       	cp	r18, r22
 a10:	37 07       	cpc	r19, r23
 a12:	48 07       	cpc	r20, r24
 a14:	ab 07       	cpc	r26, r27
 a16:	b0 e8       	ldi	r27, 0x80	; 128
 a18:	09 f0       	breq	.+2      	; 0xa1c <__divsf3_pse+0x56>
 a1a:	bb 0b       	sbc	r27, r27
 a1c:	80 2d       	mov	r24, r0
 a1e:	bf 01       	movw	r22, r30
 a20:	ff 27       	eor	r31, r31
 a22:	93 58       	subi	r25, 0x83	; 131
 a24:	5f 4f       	sbci	r21, 0xFF	; 255
 a26:	3a f0       	brmi	.+14     	; 0xa36 <__divsf3_pse+0x70>
 a28:	9e 3f       	cpi	r25, 0xFE	; 254
 a2a:	51 05       	cpc	r21, r1
 a2c:	78 f0       	brcs	.+30     	; 0xa4c <__divsf3_pse+0x86>
 a2e:	0c 94 aa 05 	jmp	0xb54	; 0xb54 <__fp_inf>
 a32:	0c 94 f5 05 	jmp	0xbea	; 0xbea <__fp_szero>
 a36:	5f 3f       	cpi	r21, 0xFF	; 255
 a38:	e4 f3       	brlt	.-8      	; 0xa32 <__divsf3_pse+0x6c>
 a3a:	98 3e       	cpi	r25, 0xE8	; 232
 a3c:	d4 f3       	brlt	.-12     	; 0xa32 <__divsf3_pse+0x6c>
 a3e:	86 95       	lsr	r24
 a40:	77 95       	ror	r23
 a42:	67 95       	ror	r22
 a44:	b7 95       	ror	r27
 a46:	f7 95       	ror	r31
 a48:	9f 5f       	subi	r25, 0xFF	; 255
 a4a:	c9 f7       	brne	.-14     	; 0xa3e <__divsf3_pse+0x78>
 a4c:	88 0f       	add	r24, r24
 a4e:	91 1d       	adc	r25, r1
 a50:	96 95       	lsr	r25
 a52:	87 95       	ror	r24
 a54:	97 f9       	bld	r25, 7
 a56:	08 95       	ret
 a58:	e1 e0       	ldi	r30, 0x01	; 1
 a5a:	66 0f       	add	r22, r22
 a5c:	77 1f       	adc	r23, r23
 a5e:	88 1f       	adc	r24, r24
 a60:	bb 1f       	adc	r27, r27
 a62:	62 17       	cp	r22, r18
 a64:	73 07       	cpc	r23, r19
 a66:	84 07       	cpc	r24, r20
 a68:	ba 07       	cpc	r27, r26
 a6a:	20 f0       	brcs	.+8      	; 0xa74 <__divsf3_pse+0xae>
 a6c:	62 1b       	sub	r22, r18
 a6e:	73 0b       	sbc	r23, r19
 a70:	84 0b       	sbc	r24, r20
 a72:	ba 0b       	sbc	r27, r26
 a74:	ee 1f       	adc	r30, r30
 a76:	88 f7       	brcc	.-30     	; 0xa5a <__divsf3_pse+0x94>
 a78:	e0 95       	com	r30
 a7a:	08 95       	ret

00000a7c <__fixunssfsi>:
 a7c:	0e 94 da 05 	call	0xbb4	; 0xbb4 <__fp_splitA>
 a80:	88 f0       	brcs	.+34     	; 0xaa4 <__fixunssfsi+0x28>
 a82:	9f 57       	subi	r25, 0x7F	; 127
 a84:	98 f0       	brcs	.+38     	; 0xaac <__fixunssfsi+0x30>
 a86:	b9 2f       	mov	r27, r25
 a88:	99 27       	eor	r25, r25
 a8a:	b7 51       	subi	r27, 0x17	; 23
 a8c:	b0 f0       	brcs	.+44     	; 0xaba <__fixunssfsi+0x3e>
 a8e:	e1 f0       	breq	.+56     	; 0xac8 <__fixunssfsi+0x4c>
 a90:	66 0f       	add	r22, r22
 a92:	77 1f       	adc	r23, r23
 a94:	88 1f       	adc	r24, r24
 a96:	99 1f       	adc	r25, r25
 a98:	1a f0       	brmi	.+6      	; 0xaa0 <__fixunssfsi+0x24>
 a9a:	ba 95       	dec	r27
 a9c:	c9 f7       	brne	.-14     	; 0xa90 <__fixunssfsi+0x14>
 a9e:	14 c0       	rjmp	.+40     	; 0xac8 <__fixunssfsi+0x4c>
 aa0:	b1 30       	cpi	r27, 0x01	; 1
 aa2:	91 f0       	breq	.+36     	; 0xac8 <__fixunssfsi+0x4c>
 aa4:	0e 94 f4 05 	call	0xbe8	; 0xbe8 <__fp_zero>
 aa8:	b1 e0       	ldi	r27, 0x01	; 1
 aaa:	08 95       	ret
 aac:	0c 94 f4 05 	jmp	0xbe8	; 0xbe8 <__fp_zero>
 ab0:	67 2f       	mov	r22, r23
 ab2:	78 2f       	mov	r23, r24
 ab4:	88 27       	eor	r24, r24
 ab6:	b8 5f       	subi	r27, 0xF8	; 248
 ab8:	39 f0       	breq	.+14     	; 0xac8 <__fixunssfsi+0x4c>
 aba:	b9 3f       	cpi	r27, 0xF9	; 249
 abc:	cc f3       	brlt	.-14     	; 0xab0 <__fixunssfsi+0x34>
 abe:	86 95       	lsr	r24
 ac0:	77 95       	ror	r23
 ac2:	67 95       	ror	r22
 ac4:	b3 95       	inc	r27
 ac6:	d9 f7       	brne	.-10     	; 0xabe <__fixunssfsi+0x42>
 ac8:	3e f4       	brtc	.+14     	; 0xad8 <__fixunssfsi+0x5c>
 aca:	90 95       	com	r25
 acc:	80 95       	com	r24
 ace:	70 95       	com	r23
 ad0:	61 95       	neg	r22
 ad2:	7f 4f       	sbci	r23, 0xFF	; 255
 ad4:	8f 4f       	sbci	r24, 0xFF	; 255
 ad6:	9f 4f       	sbci	r25, 0xFF	; 255
 ad8:	08 95       	ret

00000ada <__floatunsisf>:
 ada:	e8 94       	clt
 adc:	09 c0       	rjmp	.+18     	; 0xaf0 <__floatsisf+0x12>

00000ade <__floatsisf>:
 ade:	97 fb       	bst	r25, 7
 ae0:	3e f4       	brtc	.+14     	; 0xaf0 <__floatsisf+0x12>
 ae2:	90 95       	com	r25
 ae4:	80 95       	com	r24
 ae6:	70 95       	com	r23
 ae8:	61 95       	neg	r22
 aea:	7f 4f       	sbci	r23, 0xFF	; 255
 aec:	8f 4f       	sbci	r24, 0xFF	; 255
 aee:	9f 4f       	sbci	r25, 0xFF	; 255
 af0:	99 23       	and	r25, r25
 af2:	a9 f0       	breq	.+42     	; 0xb1e <__floatsisf+0x40>
 af4:	f9 2f       	mov	r31, r25
 af6:	96 e9       	ldi	r25, 0x96	; 150
 af8:	bb 27       	eor	r27, r27
 afa:	93 95       	inc	r25
 afc:	f6 95       	lsr	r31
 afe:	87 95       	ror	r24
 b00:	77 95       	ror	r23
 b02:	67 95       	ror	r22
 b04:	b7 95       	ror	r27
 b06:	f1 11       	cpse	r31, r1
 b08:	f8 cf       	rjmp	.-16     	; 0xafa <__floatsisf+0x1c>
 b0a:	fa f4       	brpl	.+62     	; 0xb4a <__floatsisf+0x6c>
 b0c:	bb 0f       	add	r27, r27
 b0e:	11 f4       	brne	.+4      	; 0xb14 <__floatsisf+0x36>
 b10:	60 ff       	sbrs	r22, 0
 b12:	1b c0       	rjmp	.+54     	; 0xb4a <__floatsisf+0x6c>
 b14:	6f 5f       	subi	r22, 0xFF	; 255
 b16:	7f 4f       	sbci	r23, 0xFF	; 255
 b18:	8f 4f       	sbci	r24, 0xFF	; 255
 b1a:	9f 4f       	sbci	r25, 0xFF	; 255
 b1c:	16 c0       	rjmp	.+44     	; 0xb4a <__floatsisf+0x6c>
 b1e:	88 23       	and	r24, r24
 b20:	11 f0       	breq	.+4      	; 0xb26 <__floatsisf+0x48>
 b22:	96 e9       	ldi	r25, 0x96	; 150
 b24:	11 c0       	rjmp	.+34     	; 0xb48 <__floatsisf+0x6a>
 b26:	77 23       	and	r23, r23
 b28:	21 f0       	breq	.+8      	; 0xb32 <__floatsisf+0x54>
 b2a:	9e e8       	ldi	r25, 0x8E	; 142
 b2c:	87 2f       	mov	r24, r23
 b2e:	76 2f       	mov	r23, r22
 b30:	05 c0       	rjmp	.+10     	; 0xb3c <__floatsisf+0x5e>
 b32:	66 23       	and	r22, r22
 b34:	71 f0       	breq	.+28     	; 0xb52 <__floatsisf+0x74>
 b36:	96 e8       	ldi	r25, 0x86	; 134
 b38:	86 2f       	mov	r24, r22
 b3a:	70 e0       	ldi	r23, 0x00	; 0
 b3c:	60 e0       	ldi	r22, 0x00	; 0
 b3e:	2a f0       	brmi	.+10     	; 0xb4a <__floatsisf+0x6c>
 b40:	9a 95       	dec	r25
 b42:	66 0f       	add	r22, r22
 b44:	77 1f       	adc	r23, r23
 b46:	88 1f       	adc	r24, r24
 b48:	da f7       	brpl	.-10     	; 0xb40 <__floatsisf+0x62>
 b4a:	88 0f       	add	r24, r24
 b4c:	96 95       	lsr	r25
 b4e:	87 95       	ror	r24
 b50:	97 f9       	bld	r25, 7
 b52:	08 95       	ret

00000b54 <__fp_inf>:
 b54:	97 f9       	bld	r25, 7
 b56:	9f 67       	ori	r25, 0x7F	; 127
 b58:	80 e8       	ldi	r24, 0x80	; 128
 b5a:	70 e0       	ldi	r23, 0x00	; 0
 b5c:	60 e0       	ldi	r22, 0x00	; 0
 b5e:	08 95       	ret

00000b60 <__fp_nan>:
 b60:	9f ef       	ldi	r25, 0xFF	; 255
 b62:	80 ec       	ldi	r24, 0xC0	; 192
 b64:	08 95       	ret

00000b66 <__fp_pscA>:
 b66:	00 24       	eor	r0, r0
 b68:	0a 94       	dec	r0
 b6a:	16 16       	cp	r1, r22
 b6c:	17 06       	cpc	r1, r23
 b6e:	18 06       	cpc	r1, r24
 b70:	09 06       	cpc	r0, r25
 b72:	08 95       	ret

00000b74 <__fp_pscB>:
 b74:	00 24       	eor	r0, r0
 b76:	0a 94       	dec	r0
 b78:	12 16       	cp	r1, r18
 b7a:	13 06       	cpc	r1, r19
 b7c:	14 06       	cpc	r1, r20
 b7e:	05 06       	cpc	r0, r21
 b80:	08 95       	ret

00000b82 <__fp_round>:
 b82:	09 2e       	mov	r0, r25
 b84:	03 94       	inc	r0
 b86:	00 0c       	add	r0, r0
 b88:	11 f4       	brne	.+4      	; 0xb8e <__fp_round+0xc>
 b8a:	88 23       	and	r24, r24
 b8c:	52 f0       	brmi	.+20     	; 0xba2 <__fp_round+0x20>
 b8e:	bb 0f       	add	r27, r27
 b90:	40 f4       	brcc	.+16     	; 0xba2 <__fp_round+0x20>
 b92:	bf 2b       	or	r27, r31
 b94:	11 f4       	brne	.+4      	; 0xb9a <__fp_round+0x18>
 b96:	60 ff       	sbrs	r22, 0
 b98:	04 c0       	rjmp	.+8      	; 0xba2 <__fp_round+0x20>
 b9a:	6f 5f       	subi	r22, 0xFF	; 255
 b9c:	7f 4f       	sbci	r23, 0xFF	; 255
 b9e:	8f 4f       	sbci	r24, 0xFF	; 255
 ba0:	9f 4f       	sbci	r25, 0xFF	; 255
 ba2:	08 95       	ret

00000ba4 <__fp_split3>:
 ba4:	57 fd       	sbrc	r21, 7
 ba6:	90 58       	subi	r25, 0x80	; 128
 ba8:	44 0f       	add	r20, r20
 baa:	55 1f       	adc	r21, r21
 bac:	59 f0       	breq	.+22     	; 0xbc4 <__fp_splitA+0x10>
 bae:	5f 3f       	cpi	r21, 0xFF	; 255
 bb0:	71 f0       	breq	.+28     	; 0xbce <__fp_splitA+0x1a>
 bb2:	47 95       	ror	r20

00000bb4 <__fp_splitA>:
 bb4:	88 0f       	add	r24, r24
 bb6:	97 fb       	bst	r25, 7
 bb8:	99 1f       	adc	r25, r25
 bba:	61 f0       	breq	.+24     	; 0xbd4 <__fp_splitA+0x20>
 bbc:	9f 3f       	cpi	r25, 0xFF	; 255
 bbe:	79 f0       	breq	.+30     	; 0xbde <__fp_splitA+0x2a>
 bc0:	87 95       	ror	r24
 bc2:	08 95       	ret
 bc4:	12 16       	cp	r1, r18
 bc6:	13 06       	cpc	r1, r19
 bc8:	14 06       	cpc	r1, r20
 bca:	55 1f       	adc	r21, r21
 bcc:	f2 cf       	rjmp	.-28     	; 0xbb2 <__fp_split3+0xe>
 bce:	46 95       	lsr	r20
 bd0:	f1 df       	rcall	.-30     	; 0xbb4 <__fp_splitA>
 bd2:	08 c0       	rjmp	.+16     	; 0xbe4 <__fp_splitA+0x30>
 bd4:	16 16       	cp	r1, r22
 bd6:	17 06       	cpc	r1, r23
 bd8:	18 06       	cpc	r1, r24
 bda:	99 1f       	adc	r25, r25
 bdc:	f1 cf       	rjmp	.-30     	; 0xbc0 <__fp_splitA+0xc>
 bde:	86 95       	lsr	r24
 be0:	71 05       	cpc	r23, r1
 be2:	61 05       	cpc	r22, r1
 be4:	08 94       	sec
 be6:	08 95       	ret

00000be8 <__fp_zero>:
 be8:	e8 94       	clt

00000bea <__fp_szero>:
 bea:	bb 27       	eor	r27, r27
 bec:	66 27       	eor	r22, r22
 bee:	77 27       	eor	r23, r23
 bf0:	cb 01       	movw	r24, r22
 bf2:	97 f9       	bld	r25, 7
 bf4:	08 95       	ret

00000bf6 <itoa>:
 bf6:	45 32       	cpi	r20, 0x25	; 37
 bf8:	51 05       	cpc	r21, r1
 bfa:	20 f4       	brcc	.+8      	; 0xc04 <itoa+0xe>
 bfc:	42 30       	cpi	r20, 0x02	; 2
 bfe:	10 f0       	brcs	.+4      	; 0xc04 <itoa+0xe>
 c00:	0c 94 06 06 	jmp	0xc0c	; 0xc0c <__itoa_ncheck>
 c04:	fb 01       	movw	r30, r22
 c06:	10 82       	st	Z, r1
 c08:	cb 01       	movw	r24, r22
 c0a:	08 95       	ret

00000c0c <__itoa_ncheck>:
 c0c:	bb 27       	eor	r27, r27
 c0e:	4a 30       	cpi	r20, 0x0A	; 10
 c10:	31 f4       	brne	.+12     	; 0xc1e <__itoa_ncheck+0x12>
 c12:	99 23       	and	r25, r25
 c14:	22 f4       	brpl	.+8      	; 0xc1e <__itoa_ncheck+0x12>
 c16:	bd e2       	ldi	r27, 0x2D	; 45
 c18:	90 95       	com	r25
 c1a:	81 95       	neg	r24
 c1c:	9f 4f       	sbci	r25, 0xFF	; 255
 c1e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__utoa_common>

00000c22 <__utoa_ncheck>:
 c22:	bb 27       	eor	r27, r27

00000c24 <__utoa_common>:
 c24:	fb 01       	movw	r30, r22
 c26:	55 27       	eor	r21, r21
 c28:	aa 27       	eor	r26, r26
 c2a:	88 0f       	add	r24, r24
 c2c:	99 1f       	adc	r25, r25
 c2e:	aa 1f       	adc	r26, r26
 c30:	a4 17       	cp	r26, r20
 c32:	10 f0       	brcs	.+4      	; 0xc38 <__utoa_common+0x14>
 c34:	a4 1b       	sub	r26, r20
 c36:	83 95       	inc	r24
 c38:	50 51       	subi	r21, 0x10	; 16
 c3a:	b9 f7       	brne	.-18     	; 0xc2a <__utoa_common+0x6>
 c3c:	a0 5d       	subi	r26, 0xD0	; 208
 c3e:	aa 33       	cpi	r26, 0x3A	; 58
 c40:	08 f0       	brcs	.+2      	; 0xc44 <__utoa_common+0x20>
 c42:	a9 5d       	subi	r26, 0xD9	; 217
 c44:	a1 93       	st	Z+, r26
 c46:	00 97       	sbiw	r24, 0x00	; 0
 c48:	79 f7       	brne	.-34     	; 0xc28 <__utoa_common+0x4>
 c4a:	b1 11       	cpse	r27, r1
 c4c:	b1 93       	st	Z+, r27
 c4e:	11 92       	st	Z+, r1
 c50:	cb 01       	movw	r24, r22
 c52:	0c 94 2b 06 	jmp	0xc56	; 0xc56 <strrev>

00000c56 <strrev>:
 c56:	dc 01       	movw	r26, r24
 c58:	fc 01       	movw	r30, r24
 c5a:	67 2f       	mov	r22, r23
 c5c:	71 91       	ld	r23, Z+
 c5e:	77 23       	and	r23, r23
 c60:	e1 f7       	brne	.-8      	; 0xc5a <strrev+0x4>
 c62:	32 97       	sbiw	r30, 0x02	; 2
 c64:	04 c0       	rjmp	.+8      	; 0xc6e <strrev+0x18>
 c66:	7c 91       	ld	r23, X
 c68:	6d 93       	st	X+, r22
 c6a:	70 83       	st	Z, r23
 c6c:	62 91       	ld	r22, -Z
 c6e:	ae 17       	cp	r26, r30
 c70:	bf 07       	cpc	r27, r31
 c72:	c8 f3       	brcs	.-14     	; 0xc66 <strrev+0x10>
 c74:	08 95       	ret

00000c76 <eeprom_read_word>:
 c76:	a8 e1       	ldi	r26, 0x18	; 24
 c78:	b0 e0       	ldi	r27, 0x00	; 0
 c7a:	42 e0       	ldi	r20, 0x02	; 2
 c7c:	50 e0       	ldi	r21, 0x00	; 0
 c7e:	0c 94 49 06 	jmp	0xc92	; 0xc92 <eeprom_read_blraw>

00000c82 <eeprom_update_word>:
 c82:	01 96       	adiw	r24, 0x01	; 1
 c84:	27 2f       	mov	r18, r23
 c86:	0e 94 58 06 	call	0xcb0	; 0xcb0 <eeprom_update_r18>
 c8a:	0c 94 57 06 	jmp	0xcae	; 0xcae <eeprom_update_byte>

00000c8e <eeprom_read_block>:
 c8e:	dc 01       	movw	r26, r24
 c90:	cb 01       	movw	r24, r22

00000c92 <eeprom_read_blraw>:
 c92:	fc 01       	movw	r30, r24
 c94:	f9 99       	sbic	0x1f, 1	; 31
 c96:	fe cf       	rjmp	.-4      	; 0xc94 <eeprom_read_blraw+0x2>
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <eeprom_read_blraw+0x14>
 c9a:	f2 bd       	out	0x22, r31	; 34
 c9c:	e1 bd       	out	0x21, r30	; 33
 c9e:	f8 9a       	sbi	0x1f, 0	; 31
 ca0:	31 96       	adiw	r30, 0x01	; 1
 ca2:	00 b4       	in	r0, 0x20	; 32
 ca4:	0d 92       	st	X+, r0
 ca6:	41 50       	subi	r20, 0x01	; 1
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	b8 f7       	brcc	.-18     	; 0xc9a <eeprom_read_blraw+0x8>
 cac:	08 95       	ret

00000cae <eeprom_update_byte>:
 cae:	26 2f       	mov	r18, r22

00000cb0 <eeprom_update_r18>:
 cb0:	f9 99       	sbic	0x1f, 1	; 31
 cb2:	fe cf       	rjmp	.-4      	; 0xcb0 <eeprom_update_r18>
 cb4:	92 bd       	out	0x22, r25	; 34
 cb6:	81 bd       	out	0x21, r24	; 33
 cb8:	f8 9a       	sbi	0x1f, 0	; 31
 cba:	01 97       	sbiw	r24, 0x01	; 1
 cbc:	00 b4       	in	r0, 0x20	; 32
 cbe:	02 16       	cp	r0, r18
 cc0:	39 f0       	breq	.+14     	; 0xcd0 <eeprom_update_r18+0x20>
 cc2:	1f ba       	out	0x1f, r1	; 31
 cc4:	20 bd       	out	0x20, r18	; 32
 cc6:	0f b6       	in	r0, 0x3f	; 63
 cc8:	f8 94       	cli
 cca:	fa 9a       	sbi	0x1f, 2	; 31
 ccc:	f9 9a       	sbi	0x1f, 1	; 31
 cce:	0f be       	out	0x3f, r0	; 63
 cd0:	08 95       	ret

00000cd2 <_exit>:
 cd2:	f8 94       	cli

00000cd4 <__stop_program>:
 cd4:	ff cf       	rjmp	.-2      	; 0xcd4 <__stop_program>
